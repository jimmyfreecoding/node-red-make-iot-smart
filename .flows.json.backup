[
    {
        "id": "34ab4d95e517fb00",
        "type": "tab",
        "label": "新流程"
    },
    {
        "id": "d7f7b9bc5a33ce55",
        "type": "tab",
        "label": "IOT统一平台",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9459898094a79b01",
        "type": "tab",
        "label": "新流程"
    },
    {
        "id": "adfefcfb027bb319",
        "type": "tab",
        "label": "新流程"
    },
    {
        "id": "26637148eca75ac1",
        "type": "mqtt-broker",
        "name": "",
        "broker": "z650480e.ala.cn-hangzhou.emqxsl.cn",
        "port": "8883",
        "tls": "",
        "clientid": "JimmyNodered",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "d1b65edb7885fb7b",
        "type": "api-config",
        "name": "Default AI Config",
        "provider": "openai",
        "model": "gpt-4o-mini",
        "useDifferentModels": false,
        "planningModel": "",
        "executionModel": "",
        "temperature": 0.1,
        "maxTokens": 2000
    },
    {
        "id": "inject-node",
        "type": "inject",
        "z": "34ab4d95e517fb00",
        "name": "定时触发",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 100,
        "wires": [
            [
                "function-node"
            ]
        ]
    },
    {
        "id": "function-node",
        "type": "function",
        "z": "34ab4d95e517fb00",
        "name": "添加问候语",
        "func": "msg.greeting = \"你好，Node-RED！\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 100,
        "wires": [
            [
                "debug-node"
            ]
        ]
    },
    {
        "id": "debug-node",
        "type": "debug",
        "z": "34ab4d95e517fb00",
        "name": "输出调试信息",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 100,
        "wires": []
    },
    {
        "id": "66ba30d6136456d7",
        "type": "mqtt in",
        "z": "d7f7b9bc5a33ce55",
        "name": "边缘网关设备配置上报",
        "topic": "/iot/discover/devices",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "26637148eca75ac1",
        "nl": false,
        "rap": false,
        "rh": "1",
        "inputs": 0,
        "x": 440,
        "y": 180,
        "wires": [
            [
                "02f02ae625b5e9c0"
            ]
        ]
    },
    {
        "id": "5e7883d0e44a5ef1",
        "type": "debug",
        "z": "d7f7b9bc5a33ce55",
        "name": "debug 62",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 180,
        "wires": []
    },
    {
        "id": "02f02ae625b5e9c0",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "存储数据库",
        "func": "let result = msg.payload\nif (result.gateway && result.layer && result.devices && result.layers){\n    let gateway = result.gateway\n    let gateways = await global.get(\"mysql_query\")(\"select * from iot_gateway where macaddr = ? limit 1\", gateway)\n    if(gateways[0] == undefined){\n        msg.error = \"无效网关：\"+gateway\n        return msg\n    }\n\n    //清理数据\n    let where = \"\"\n    for(let i = 0; i < result.layers.length; i++){\n        where += \" and layer != '\"+result.layers[i]+\"' \"\n    }\n    let d_iot_devices = await global.get(\"mysql_query\")(\"select * from iot_device where gatewayID = ? \" + where, gateways[0].id)\n    for(let i = 0; i < d_iot_devices.length; i++){\n        await global.get(\"mysql_query\")(\"delete from iot_device_action where gatewayID = ? and deviceID = ?\", [gateways[0].id, d_iot_devices[i].id])\n        await global.get(\"mysql_query\")(\"delete from iot_device where id = ?\", d_iot_devices[i].id)\n    }\n\n    //现有库数据过滤被删除数据\n    let s_iot_devices = await global.get(\"mysql_query\")(\"select * from iot_device where gatewayID = ? and layer = ?\", [gateways[0].id, result.layer])\n    let s_iot_devices_obj = {}\n    for (let i = 0; i < s_iot_devices.length; i++){\n        s_iot_devices_obj[s_iot_devices[i].id] = true\n    }\n\n\n    let items = result.devices\n    for(let i = 0; i < items.length; i++){\n        let code = items[i].code\n        let name = items[i].name\n        let type = items[i].type\n        let protocol = items[i].protocol\n        let iotType = items[i].iottype\n        let channel = items[i].channel\n        let gatewayID = gateways[0].id\n        let gatewayName = gateways[0].name\n        let layer = result.layer\n        let spaceCode = gateways[0].spaceCode\n        let spaceName = gateways[0].spaceName\n        let areaCode = gateways[0].areaCode\n        let areaName = gateways[0].areaName\n        let floorCode = gateways[0].floorCode\n        let floorName = gateways[0].floorName\n        let floorAreaType = \"\"\n        let floorAreaCode = \"\"\n        let floorAreaName = \"\"\n        if(items[i].area){\n            let areaArr = items[i].area.split(\"_\")\n            if(areaArr[2]){\n                floorAreaType = areaArr[0]\n                floorAreaCode = areaArr[1]\n                floorAreaName = areaArr[2]\n            }\n        }\n\n        let createtime = parseInt(new Date().getTime() / 1000)\n\n        let values = [code, name, type, protocol, iotType, channel, gatewayID, gatewayName, layer, spaceCode, spaceName, areaCode, areaName, floorCode, floorName, floorAreaType, floorAreaCode, floorAreaName, createtime]\n        let iot_devices = await global.get(\"mysql_query\")(\"select * from iot_device where gatewayID = ? and layer = ? and code = ? limit 1\", [gatewayID, layer, code])\n        if (iot_devices[0] == undefined){\n            await global.get(\"mysql_query\")('insert into iot_device(code, name, type, protocol, iotType, channel, gatewayID, gatewayName, layer, spaceCode, spaceName, areaCode, areaName, floorCode, floorName, floorAreaType, floorAreaCode, floorAreaName, createtime) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)', values)\n            iot_devices = await global.get(\"mysql_query\")(\"select * from iot_device where gatewayID = ? and layer = ? and code = ? limit 1\", [gatewayID, layer, code])\n            if (iot_devices[0] == undefined){\n                msg.error = \"添加设备失败,code:\" + code\n                return msg\n            }\n        }else{\n            await global.get(\"mysql_query\")('update iot_device set code = ?, name = ?, type = ?, protocol = ?, iotType = ?, channel = ?, gatewayID = ?, gatewayName = ?, layer = ?, spaceCode = ?, spaceName = ?, areaCode = ?, areaName = ?, floorCode = ?, floorName = ?, floorAreaType = ?, floorAreaCode = ?, floorAreaName = ?, createtime = ? where id = \"' + iot_devices[0].id +'\" limit 1', values)\n            if (s_iot_devices_obj[iot_devices[0].id]){\n                delete s_iot_devices_obj[iot_devices[0].id]\n            }\n        }\n\n        await global.get(\"mysql_query\")(\"delete from iot_device_action where gatewayID = ? and deviceID = ?\", [gatewayID, iot_devices[0].id])\n        if (items[i].actions){\n            let actions = items[i].actions\n            for (let j = 0; j < actions.length; j++) {\n                let gatewayID = gateways[0].id\n                let deviceID = iot_devices[0].id\n                let name = actions[j].name\n                let type = actions[j].type\n                let createtime = parseInt(new Date().getTime() / 1000)\n                let actionValues = [gatewayID, deviceID, name, type, createtime]\n                await global.get(\"mysql_query\")('insert into iot_device_action(gatewayID, deviceID, name, type, createtime) values (?,?,?,?,?)', actionValues)\n            }\n        }\n    }\n\n    Object.keys(s_iot_devices_obj).forEach(async function(id) {\n        await global.get(\"mysql_query\")(\"delete from iot_device_action where gatewayID = ? and deviceID = ?\", [gateways[0].id, id])\n        await global.get(\"mysql_query\")(\"delete from iot_device where id = ?\", id)\n    });\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 180,
        "wires": [
            [
                "5e7883d0e44a5ef1"
            ]
        ]
    },
    {
        "id": "56e7317cd7521e69",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "获取网关所在楼层区域及设备",
        "func": "\n/**\n * 数据结构\n{\n    \"floors\":[\n        {\n            \"floorCode\":\"20\",\n            \"floorName\":\"20f\",\n            \"areas\": [\n                {\n                    \"areaCode\": \"d\",\n                    \"areaName\": \"工位D区\",\n                    \"areaType\": \"area\"\n                },\n                {\n                    \"areaCode\": \"2001\",\n                    \"areaName\": \"2001会议室\",\n                    \"areaType\": \"meetingroom\"\n                },\n                {\n                    \"areaCode\": \"ck\",\n                    \"areaName\": \"库房\",\n                    \"areaType\": \"room\"\n                }\n            ]\n        }\n    ]\n}\n */\nlet macaddr = msg.payload.mac\nlet layer = msg.payload.layer\nif(!macaddr || !layer){\n    msg.error = \"无效请求\"\n    return msg\n}\nlet iot_gateways = await global.get(\"mysql_query\")(\"select * from iot_gateway where deleteFlag = 1 and macaddr = ?\", macaddr)\nif (!iot_gateways[0]){\n    msg.error = \"无效网关\"\n    return msg\n}\n\nlet result = {}\nresult.spaceCode = iot_gateways[0].spaceCode\nresult.spaceName = iot_gateways[0].spaceName\nresult.floorAreaCode = iot_gateways[0].areaCode\nresult.floorAreaName = iot_gateways[0].areaName\n\nresult.floors = []\nlet floor = {}\nfloor.floorCode = iot_gateways[0].floorCode\nfloor.floorName = iot_gateways[0].floorName\nfloor.areas = []\n\nlet floor_areas = await global.get(\"mysql_query\")(\"select * from floor_area where deleteFlag = 1 and spaceCode = ? and areaCode = ? and floorCode = ?\", [iot_gateways[0].spaceCode, iot_gateways[0].areaCode, iot_gateways[0].floorCode])\nfor(let i = 0; i < floor_areas.length; i++){\n    floor.areas.push({\n        areaCode:floor_areas[i].code,\n        areaName: floor_areas[i].name,\n        areaType: \"area\",\n    })\n}\n\nlet floor_pub_areas = await global.get(\"mysql_query\")(\"select * from floor_pub_area where deleteFlag = 1 and spaceCode = ? and areaCode = ? and floorCode = ?\", [iot_gateways[0].spaceCode, iot_gateways[0].areaCode, iot_gateways[0].floorCode])\nfor(let i = 0; i < floor_pub_areas.length; i++){\n    floor.areas.push({\n        areaCode:floor_pub_areas[i].code,\n        areaName: floor_pub_areas[i].name,\n        areaType: \"pubArea\",\n    })\n}\n\nlet floor_rooms = await global.get(\"mysql_query\")(\"select * from floor_room where deleteFlag = 1 and spaceCode = ? and areaCode = ? and floorCode = ?\", [iot_gateways[0].spaceCode, iot_gateways[0].areaCode, iot_gateways[0].floorCode])\nfor (let i = 0; i < floor_rooms.length; i++) {\n    floor.areas.push({\n        areaCode: floor_rooms[i].code,\n        areaName: floor_rooms[i].name,\n        areaType: \"room\",\n    })\n}\n\nlet floor_mrooms = await global.get(\"mysql_query\")(\"select * from floor_mroom where deleteFlag = 1 and spaceCode = ? and areaCode = ? and floorCode = ?\", [iot_gateways[0].spaceCode, iot_gateways[0].areaCode, iot_gateways[0].floorCode])\nfor (let i = 0; i < floor_mrooms.length; i++) {\n    floor.areas.push({\n        areaCode: floor_mrooms[i].code,\n        areaName: floor_mrooms[i].name,\n        areaType: \"meetingroom\",\n    })\n}\n\nlet floor_toilets = await global.get(\"mysql_query\")(\"select * from floor_toilet where deleteFlag = 1 and spaceCode = ? and areaCode = ? and floorCode = ?\", [iot_gateways[0].spaceCode, iot_gateways[0].areaCode, iot_gateways[0].floorCode])\nfor (let i = 0; i < floor_toilets.length; i++) {\n    floor.areas.push({\n        areaCode: floor_toilets[i].code,\n        areaName: floor_toilets[i].name,\n        areaType: \"toilet\",\n    })\n}\nresult.floors.push(floor)\n\n\nresult.devices = []\nlet iot_devices = await global.get(\"mysql_query\")(\"select * from iot_device where deleteFlag = 1 and gatewayID = ? and layer = ?\", [iot_gateways[0].id, layer])\nfor (let i = 0; i < iot_devices.length; i++) {\n    let iot_device_actions = await global.get(\"mysql_query\")(\"select name,type from iot_device_action where gatewayID = ? and deviceID = ?\", [iot_gateways[0].id, iot_devices[i].id])\n    \n    //配置模式\n    let typesObj = {\n        airconditioning:[{\n            name:\"开\",\n            type:\"on\"\n        },{\n            name:\"关\",\n            type:\"off\"\n        },{\n            name:\"调温\",\n            type:\"temperature\"\n        },{\n            name:\"模式\",\n            type:\"mode\"\n        },{\n            name:\"风速\",\n            type:\"fan\"\n        }\n        // ,{\n        //     name:\"报警\",\n        //     type:\"alarm\"\n        // }\n        ],\n        light: [{\n            name: \"开\",\n            type: \"on\"\n        }, {\n            name: \"关\",\n            type: \"off\"\n        }],\n        pad: [{\n            name: \"开\",\n            type: \"status\"\n        }, {\n            name: \"关\",\n            type: \"play\"\n        }, {\n            name: \"关\",\n            type: \"fullscreen\"\n        }, {\n            name: \"关\",\n            type: \"bind\"\n        }, {\n            name: \"关\",\n            type: \"refresh\"\n        }],\n        airsensor:[{\n            name: \"\",\n            type: \"pm25\"\n        },{\n            name: \"\",\n            type: \"pm10\"\n        },{\n            name: \"\",\n            type: \"tvoc\"\n        },{\n            name: \"\",\n            type: \"co2\"\n        },{\n            name: \"\",\n            type: \"formaldehyde\"\n        },{\n            name: \"\",\n            type: \"temperature\"\n        },{\n            name: \"\",\n            type: \"humidity\"\n        },{\n            name: \"\",\n            type: \"light\"\n        }]\n    }\n    let modesObj = {\n        airconditioning: {\n            protocol:\"TCP\",\n            channel:\"RJ45\"\n        },\n        light: {\n            protocol: \"modbus\",\n            channel: \"RS485\"\n        },\n        pad: {\n            protocol:\"TCP\",\n            channel:\"RJ45\"\n        },\n        airsensor: {\n            protocol: \"modbus\",\n            channel: \"RS485\"\n        },\n    }\n    if (!iot_device_actions || iot_device_actions.length == 0){\n        iot_device_actions = []\n        if (typesObj[iot_devices[i].type]){\n            for (let pp = 0; pp < typesObj[iot_devices[i].type].length; pp++){\n                iot_device_actions.push({\n                    gatewayID: iot_gateways[0].id,\n                    deviceID: iot_devices[i].id,\n                    name: typesObj[iot_devices[i].type][pp].name,\n                    type: typesObj[iot_devices[i].type][pp].type\n                })\n            }\n        }\n    }\n    if (!iot_devices[i].protocol && modesObj[iot_devices[i].type]){\n        iot_devices[i].protocol = modesObj[iot_devices[i].type].protocol\n        iot_devices[i].channel = modesObj[iot_devices[i].type].channel\n    }\n    result.devices.push({\n        code: iot_devices[i].code,\n        name: iot_devices[i].name,\n        type: iot_devices[i].type,\n        iottype: iot_devices[i].iotType,\n        protocol: iot_devices[i].protocol,\n        channel: iot_devices[i].channel,\n        area: iot_devices[i].floorAreaType + \"_\" + iot_devices[i].floorAreaCode+ \"_\" + iot_devices[i].floorAreaName,\n        actions: iot_device_actions\n    })\n}\n\nmsg.payload = result\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 140,
        "wires": [
            [
                "1ceaafb5883eb40e",
                "ec017e7d940e986c"
            ]
        ]
    },
    {
        "id": "9c5b26862705200a",
        "type": "http in",
        "z": "d7f7b9bc5a33ce55",
        "name": "边缘网关初始化信息入口",
        "url": "/esaydevice/init",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 430,
        "y": 140,
        "wires": [
            [
                "56e7317cd7521e69"
            ]
        ]
    },
    {
        "id": "1ceaafb5883eb40e",
        "type": "http response",
        "z": "d7f7b9bc5a33ce55",
        "name": "",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 980,
        "y": 140,
        "wires": []
    },
    {
        "id": "3d185fd4f139ce21",
        "type": "mqtt in",
        "z": "d7f7b9bc5a33ce55",
        "name": "空气传感器数据接收",
        "topic": "/iot/status/airsensor/#",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "26637148eca75ac1",
        "nl": false,
        "rap": false,
        "rh": "1",
        "inputs": 0,
        "x": 450,
        "y": 380,
        "wires": [
            [
                "c083fa7574aff497",
                "84f43ad6b3dae041"
            ]
        ]
    },
    {
        "id": "1b41aab466f235a4",
        "type": "mqtt in",
        "z": "d7f7b9bc5a33ce55",
        "name": "设备状态上报（照明、空调）",
        "topic": "/iot/status/report",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "26637148eca75ac1",
        "nl": false,
        "rap": false,
        "rh": "1",
        "inputs": 0,
        "x": 420,
        "y": 260,
        "wires": [
            [
                "0f0e9341fe003518"
            ]
        ]
    },
    {
        "id": "4b70b64878e15a7a",
        "type": "mqtt in",
        "z": "d7f7b9bc5a33ce55",
        "name": "边缘网关设备日志上报",
        "topic": "/iot/log/report",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "26637148eca75ac1",
        "nl": false,
        "rap": false,
        "rh": "1",
        "inputs": 0,
        "x": 440,
        "y": 340,
        "wires": [
            [
                "036bab8d199f77bc"
            ]
        ]
    },
    {
        "id": "d16425ec74b9e9b2",
        "type": "debug",
        "z": "d7f7b9bc5a33ce55",
        "name": "debug 68",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 340,
        "wires": []
    },
    {
        "id": "490294dcee2087a1",
        "type": "mqtt out",
        "z": "d7f7b9bc5a33ce55",
        "name": "",
        "topic": "/iot/airsensor/data/report",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "26637148eca75ac1",
        "x": 1170,
        "y": 420,
        "wires": []
    },
    {
        "id": "84f43ad6b3dae041",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "空气数据推送至TD引擎",
        "func": "if(msg.payload && Array.isArray(msg.payload)){\n    let devices = msg.payload\n    for(let i = 0; i < devices.length; i++){\n        let gateways = await global.get(\"mysql_query\")(\"select * from iot_gateway where macaddr = ? limit 1\", devices[i].gateway)\n        if(gateways[0] == undefined){\n            continue;\n        }\n        let iot_devices = await global.get(\"mysql_query\")(\"select * from iot_device where gatewayID = ? and layer = ? and code = ? limit 1\", [gateways[0].id, devices[i].layer, devices[i].code])\n        if(iot_devices[0] == undefined){\n            continue;\n        }\n        let status = devices[i].status\n        if (!status || status.length <= 0 || status.online != 1){\n            continue\n        }\n        let data = {}\n        data.ts = new Date().getTime()\n        data.position = \"/\" + iot_devices[0].spaceCode + \"/\" + iot_devices[0].areaCode + \"/\" + iot_devices[0].floorCode + \"/\" + iot_devices[0].floorAreaCode +\"/\" + iot_devices[0].name\n        data.space = iot_devices[0].spaceCode\n        data.floor_area = iot_devices[0].areaCode\n        data.floor = iot_devices[0].floorCode\n        data.area = iot_devices[0].floorAreaCode\n        data.device_code = iot_devices[0].code\n        data.device_id = iot_devices[0].id\n        if(status.pm25 != undefined){\n            data.pm25 = parseInt(status.pm25)\n        }\n        if(status.pm10 != undefined){\n            data.pm10 = parseInt(status.pm10)\n        }\n        if (status.tvoc != undefined){\n            data.tvoc = parseInt(status.tvoc)\n        }\n        if (status.co2 != undefined){\n            data.co2 = parseInt(status.co2)\n        }\n        if (status.temperature != undefined) {\n            data.temperature = parseFloat(status.temperature)\n        }\n        if (status.humidity != undefined) {\n            data.humidity = parseFloat(status.humidity)\n        }\n        if (status.formaldehyde != undefined) {\n            data.formaldehyde = parseFloat(status.formaldehyde)\n        }\n        if (status.noise != undefined) {\n            data.noise = parseInt(status.noise)\n        }\n        if (status.light != undefined) {\n            data.light = parseInt(status.light)\n        }\n        if (status.so2 != undefined) {\n            data.so2 = parseInt(status.so2)\n        }\n        if (status.nh3 != undefined) {\n            data.nh3 = parseInt(status.nh3)\n        }\n        if (status.o3 != undefined) {\n            data.o3 = parseInt(status.o3)\n        }\n        if (status.o2 != undefined) {\n            data.o2 = parseInt(status.o2)\n        }\n        if (status.h2s != undefined) {\n            data.h2s = parseInt(status.h2s)\n        }\n        if (status.ch4 != undefined) {\n            data.ch4 = parseInt(status.ch4)\n        }\n        if (status.co != undefined) {\n            data.co = parseInt(status.co)\n        }\n        if (status.no2 != undefined) {\n            data.no2 = parseInt(status.no2)\n        }\n        if (status.h2 != undefined) {\n            data.h2 = parseInt(status.h2)\n        }\n        if (status.odor != undefined) {\n            data.odor = parseInt(status.odor)\n        }\n        let newMsg = {}\n        newMsg.payload = data\n        node.send(newMsg)\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 420,
        "wires": [
            [
                "490294dcee2087a1"
            ]
        ]
    },
    {
        "id": "c083fa7574aff497",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "存储数据库",
        "func": "let items = msg.payload\nif (items && Array.isArray(items) && items.length > 0){\n    for (let i = 0; i < items.length; i++){\n        let item = items[i]\n        if (!item.gateway || !item.layer){\n            continue;\n        }\n        let gateways = await global.get(\"mysql_query\")(\"select * from iot_gateway where macaddr = ? limit 1\", item.gateway)\n        if(gateways[0] == undefined){\n            continue;\n        }\n        let iot_devices = await global.get(\"mysql_query\")(\"select * from iot_device where gatewayID = ? and layer = ? and code = ? and deleteFlag = 1 limit 1\", [gateways[0].id, item.layer, item.code])\n        if(iot_devices[0] == undefined){\n            continue;\n        }\n        let status = JSON.stringify(item.status)\n        let statusUptime = parseInt(new Date().getTime()/1000)\n        await global.get(\"mysql_query\")(\"update iot_device set status = ? ,statusUptime = ? where id = ? limit 1\", [status, statusUptime, iot_devices[0].id])\n\n        //如果空气数据异常走另外一个分支\n        if(item.status){\n            iot_devices[0].status = item.status\n            iot_devices[0].statusUptime = statusUptime\n            let newMsg = {}\n            newMsg.payload = iot_devices[0]\n            node.send(newMsg)\n        }\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 380,
        "wires": [
            [
                "7ab40194620297e7"
            ]
        ]
    },
    {
        "id": "c303f3a09799b7f4",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "状态报警设备处理",
        "func": "let device = msg.payload\nlet spaceId = flow.get(\"spaceId\")\nif (!spaceId) {\n    return\n}\nif (device && device.status) {\n    let type = \"\" //设备类型报警\n    let typeName = \"\"\n    let deviceID = device.id\n    let deviceName = device.name\n    let deviceAddress = \"\"\n    let deviceFullName = \"/\" + device.spaceCode + \"/\" + device.areaCode + \"/\" + device.floorCode + \"/\" + device.floorAreaCode + \"/\" + device.name\n    let alarmCode = \"\"\n    let alarmMsg = \"\"\n    let baseUnit = \"\"\n    let baseValue = \"\"\n    let realValue = \"\"\n    let createTime = parseInt(new Date().getTime() / 1000)\n    let updateTime = createTime\n    if (device.status.online != 1) {\n        type = \"1\" //设备类型报警\n        typeName = \"设备告警\"\n        deviceAddress = \"online\"\n        alarmCode = \"\"\n        alarmMsg = \"设备离线\"\n    } else if (device.status.alarm == \"alarm\") {\n        type = \"1\" //设备类型报警\n        typeName = \"设备告警\"\n        alarmCode = device.status.alarmValue\n        deviceAddress = \"alarm\"\n        alarmMsg = \"设备异常\"\n        if (device.type == \"airconditioning\"){\n            type = \"2\"\n            typeName = \"空调告警\"\n            if (alarmCode == \"162\") {\n                alarmMsg = \"物业水循环异常\"\n            }else if (alarmCode == \"16\") {\n                alarmMsg = \"室外机组间通讯异常\"\n            }else if (alarmCode == \"3\") {\n                alarmMsg = \"室内外机或室内机间通讯异常\"\n            }\n        }else if (device.type == \"inundationsensor\"){\n            alarmMsg = \"漏水异常，导电率\"+alarmCode+\"，值越大水量越大\"\n        }\n    } else if (device.type == \"airconditioning\"){\n        if (device.status && device.status.pretemperature == \"30\" && device.status.mode == \"3\" && device.status.fan == \"75\"){\n            type = \"2\"\n            typeName = \"空调告警\"\n            deviceAddress = \"air_force_start\"\n            alarmCode = \"\"\n            alarmMsg = \"空调进入强启模式\"\n        }\n    }\n\n    if(!spaceId || !deviceID || !deviceAddress){\n        return\n    }\n\n    //记录告警日志\n    let values = [spaceId, type, typeName, deviceID, deviceName, deviceAddress, deviceFullName, alarmCode, alarmMsg, baseUnit, baseValue, realValue, createTime]\n    await global.get(\"mysql_query\")(\"insert into system_alarm (spaceId, type, typeName, deviceID, deviceName, deviceAddress, deviceFullName, alarmCode, alarmMsg, baseUnit, baseValue, realValue, createTime) values (?,?,?,?,?,?,?,?,?,?,?,?,?)\", values)\n\n    //推送日志信息到TD\n    let data = {}\n    data.ts = new Date().getTime()\n    data.position = deviceFullName\n    data.space = device.spaceCode\n    data.floor_area = device.areaCode\n    data.floor = device.floorCode\n    data.area = device.floorAreaCode\n    data.device_code = device.code\n    data.device_id = device.id\n    data.type = type\n    data.type_name = typeName\n    data.device_address = deviceAddress\n    data.alarm_code = alarmCode\n    data.alarm_msg = alarmMsg\n    data.base_unit = baseUnit\n    data.base_value = baseValue\n    data.real_value = realValue\n    let newMsg = {}\n    newMsg.payload = data\n    node.send(newMsg)\n\n    //记录告警数据源\n    let system_alarm_sources = await global.get(\"mysql_query\")(\"select * from system_alarm_source where spaceId = ? and deviceID = ? and `status` = 0 and deviceAddress = ? limit 1\", [spaceId, device.id, deviceAddress])\n    if (system_alarm_sources[0] == undefined) {\n        let values = [spaceId, type, typeName, deviceID, deviceName, deviceAddress, deviceFullName, alarmCode, alarmMsg, baseUnit, baseValue, realValue, createTime, updateTime]\n        await global.get(\"mysql_query\")(\"insert into system_alarm_source (spaceId, type, typeName, deviceID, deviceName, deviceAddress, deviceFullName, alarmCode, alarmMsg, baseUnit, baseValue, realValue, createTime, updateTime) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?)\", values)\n    } else {\n        await global.get(\"mysql_query\")(\"update system_alarm_source set updateTime = ? where id = ? limit 1\", [updateTime, system_alarm_sources[0].id])\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 240,
        "wires": [
            [
                "d4b09f08fb41252b"
            ]
        ]
    },
    {
        "id": "8ab854773887df36",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "初始化信息",
        "func": "return msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "flow.set(\"spaceCode\", \"default\")\n\nlet spaceMqttInfo = {\n    \"HGH-WC\":'{\"url\":\"ws://10.205.66.8:1884\",\"username\":\"zeekr_iot_platform\",\"password\":\"jp2cJFJ1AEeOFUPYcWLF\"}',\n    \"SH-IJ\":'{\"url\":\"ws://10.138.43.109:1884\",\"username\":\"zeekr\",\"password\":\"zeekr\"}'\n}\nglobal.set(\"spaceMqttInfo\", spaceMqttInfo)\n\n\nlet jsJson = function (str) {\n    try {\n        return JSON.parse(str)\n    } catch (error) {\n        return {}\n    }\n}\nflow.set(\"jsJson\", jsJson)\n\n\nconst pool = mysql.createPool({\n    host: '127.0.0.1',\n    user: 'root',\n    password: 'Dvdv1205',\n    database: 'bos',\n    multipleStatements: true,\n    connectionLimit: 500,\n    supportBigNumbers: true,\n    bigNumberStrings: true\n})\n\n// 接收一个sql语句 以及所需的values\n// 这里接收第二参数values的原因是可以使用mysql的占位符 '?'\n// 比如 query(`select * from my_database where id = ?`, [1])\n\nlet mysql_query = async function (sql, values) {\n    // 返回一个 Promise\n    return new Promise((resolve, reject) => {\n        pool.getConnection(function (err, connection) {\n            if (err) {\n                reject(err)\n            } else {\n                connection.query(sql, values, (err, rows) => {\n                    // 结束会话\n                    connection.release()\n                    if (err) {\n                        reject(err)\n                    } else {\n                        resolve(rows)\n                    }\n                })\n            }\n        })\n    })\n}\nglobal.set(\"mysql_query\", mysql_query)\n\n\nlet sleep = function (ms) {\n    return new Promise(resolve => setTimeout(resolve, ms))\n}\nglobal.set(\"sleep\", sleep)\n\nlet jsBigJson = function (str) {\n    try {\n        return jsonBigint.parse(str)\n    } catch (e) {\n        return {}\n    }\n}\nglobal.set(\"jsBigJson\", jsBigJson)\n\n\nlet randomString = function (length) {\n    let chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    var result = '';\n    for (var i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];\n    return result;\n}\nflow.set(\"randomString\", randomString)\n\nlet uuid = function () {\n    return md5(randomString(32));\n}\nflow.set(\"uuid\", uuid)\n",
        "finalize": "",
        "libs": [
            {
                "var": "crypto",
                "module": "crypto"
            },
            {
                "var": "moment",
                "module": "moment"
            },
            {
                "var": "mysql",
                "module": "mysql"
            },
            {
                "var": "jsonBigint",
                "module": "json-bigint"
            },
            {
                "var": "md5",
                "module": "md5"
            }
        ],
        "x": 230,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "7ab40194620297e7",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "状态报警设备处理",
        "func": "let device = msg.payload\nlet spaceId = flow.get(\"spaceId\")\nif (!spaceId || device.floorAreaCode == \"JF\") {\n    return\n}\n\n//阈值参数设置\nlet temperature_low = 18\nlet temperature_high = 24\nlet humidity_low = 30\nlet humidity_high = 60\nlet pm25_high = 75\nlet co2_high = 1000\nlet tvoc_high = 0.6\nlet formaldehyde_high = 0.08\n\n\nif (device && device.status) {\n    let type = \"\" //设备类型报警\n    let typeName = \"\"\n    let deviceID = device.id\n    let deviceName = device.name\n    let deviceAddress = \"\"\n    let deviceFullName = \"/\" + device.spaceCode + \"/\" + device.areaCode + \"/\" + device.floorCode + \"/\" + device.floorAreaCode + \"/\" + device.name\n    let alarmCode = \"\"\n    let alarmMsg = \"\"\n    let baseUnit = \"\"\n    let baseValue = \"\"\n    let realValue = \"\"\n    let createTime = parseInt(new Date().getTime() / 1000)\n    let updateTime = createTime\n    if (device.status.online != 1) {\n        type = \"1\" //设备类型报警\n        typeName = \"设备告警\"\n        deviceAddress = \"online\"\n        alarmMsg = \"设备离线\"\n    } else {\n        if (device.status.temperature < temperature_low) {\n            type = \"3\" //设备类型报警\n            typeName = \"环境告警\"\n            deviceAddress = \"temperature_low\"\n            alarmCode = \"\"\n            alarmMsg = \"环境温度低于\" + temperature_low +\"℃异常\"\n            baseUnit = \"℃\"\n            baseValue = temperature_low\n            realValue = device.status.temperature\n        }\n        if (device.status.temperature >= temperature_high) {\n            type = \"3\" //设备类型报警\n            typeName = \"环境告警\"\n            deviceAddress = \"temperature_high\"\n            alarmCode = \"\"\n            alarmMsg = \"环境温度高于\" + temperature_high +\"℃异常\"\n            baseUnit = \"℃\"\n            baseValue = temperature_high\n            realValue = device.status.temperature\n        }\n        if (device.status.humidity < humidity_low) {\n            type = \"3\" //设备类型报警\n            typeName = \"环境告警\"\n            deviceAddress = \"humidity_low\"\n            alarmCode = \"\"\n            alarmMsg = \"环境湿度低于\" + humidity_low +\"%异常\"\n            baseUnit = \"%\"\n            baseValue = humidity_low\n            realValue = device.status.humidity\n        }\n        if (device.status.humidity > humidity_high) {\n            type = \"3\" //设备类型报警\n            typeName = \"环境告警\"\n            deviceAddress = \"humidity_high\"\n            alarmCode = \"\"\n            alarmMsg = \"环境湿度高于\" + humidity_high +\"%异常\"\n            baseUnit = \"%\"\n            baseValue = humidity_high\n            realValue = device.status.humidity\n        }\n        if (device.status.pm25 > pm25_high) {\n            type = \"3\" //设备类型报警\n            typeName = \"环境告警\"\n            deviceAddress = \"pm25_high\"\n            alarmCode = \"\"\n            alarmMsg = \"环境PM2.5高于\" + pm25_high +\"μg/m3异常\"\n            baseUnit = \"μg/m3\"\n            baseValue = pm25_high\n            realValue = device.status.pm25\n        }\n        // if (device.status.pm10 / 1000 > 0.5) {\n        //     type = \"3\" //设备类型报警\n        //     typeName = \"环境告警\"\n        //     deviceAddress = \"pm10_high\"\n        //     alarmCode = \"\"\n        //     alarmMsg = \"环境PM1.0高于0.5mg/m3异常\"\n        //     baseUnit = \"mg/m3\"\n        //     baseValue = \"0.5\"\n        //     realValue = device.status.pm10 / 1000\n        // }\n        if (device.status.co2 > co2_high) {\n            type = \"3\" //设备类型报警\n            typeName = \"环境告警\"\n            deviceAddress = \"co2_high\"\n            alarmCode = \"\"\n            alarmMsg = \"环境CO2高于\" + co2_high +\"ppm异常\"\n            baseUnit = \"ppm\"\n            baseValue = co2_high\n            realValue = device.status.co2\n        }\n        let now_formaldehyde = parseFloat(parseFloat(device.status.formaldehyde * 1.23).toFixed(2))\n        if (now_formaldehyde > formaldehyde_high) {\n            type = \"3\" //设备类型报警\n            typeName = \"环境告警\"\n            deviceAddress = \"formaldehyde_high\"\n            alarmCode = \"\"\n            alarmMsg = \"环境甲醛高于\" + formaldehyde_high +\"mg/m3异常\"\n            baseUnit = \"mg/m3\"\n            baseValue = formaldehyde_high\n            realValue = now_formaldehyde\n        }\n        let now_tvoc = parseFloat(parseFloat(device.status.tvoc * 0.0023).toFixed(1))\n        if (now_tvoc > tvoc_high) {\n            type = \"3\" //设备类型报警\n            typeName = \"环境告警\"\n            deviceAddress = \"tvoc_high\"\n            alarmCode = \"\"\n            alarmMsg = \"环境TVOC高于\" + tvoc_high +\"mg/m3异常\"\n            baseUnit = \"mg/m3\"\n            baseValue = tvoc_high\n            realValue = now_tvoc\n        }\n        // if (device.status.so2 / 22.4 > 0.3) {\n        //     type = \"3\" //设备类型报警\n        //     typeName = \"环境告警\"\n        //     deviceAddress = \"so2_high\"\n        //     alarmCode = \"\"\n        //     alarmMsg = \"环境SO2高于0.3mg/m3异常\"\n        //     baseUnit = \"mg/m3\"\n        //     baseValue = \"0.3\"\n        //     realValue = device.status.so2 / 22.4\n        // }\n        // if (device.status.nh3 / 22.4 > 10) {\n        //     type = \"3\" //设备类型报警\n        //     typeName = \"环境告警\"\n        //     deviceAddress = \"nh3_high\"\n        //     alarmCode = \"\"\n        //     alarmMsg = \"环境氨气高于10mg/m3异常\"\n        //     baseUnit = \"mg/m3\"\n        //     baseValue = \"10\"\n        //     realValue = device.status.nh3 / 22.4\n        // }\n    }\n    \n    if(!spaceId || !deviceID || !deviceAddress){\n        return\n    }\n\n    //记录告警日志\n    let values = [spaceId, type, typeName, deviceID, deviceName, deviceAddress, deviceFullName, alarmCode, alarmMsg, baseUnit, baseValue, realValue, createTime]\n    await global.get(\"mysql_query\")(\"insert into system_alarm (spaceId, type, typeName, deviceID, deviceName, deviceAddress, deviceFullName, alarmCode, alarmMsg, baseUnit, baseValue, realValue, createTime) values (?,?,?,?,?,?,?,?,?,?,?,?,?)\", values)\n\n    //推送日志信息到TD\n    let data = {}\n    data.ts = new Date().getTime()\n    data.position = deviceFullName\n    data.space = device.spaceCode\n    data.floor_area = device.areaCode\n    data.floor = device.floorCode\n    data.area = device.floorAreaCode\n    data.device_code = device.code\n    data.device_id = device.id\n    data.type = type\n    data.type_name = typeName\n    data.device_address = deviceAddress\n    data.alarm_code = alarmCode\n    data.alarm_msg = alarmMsg\n    data.base_unit = baseUnit\n    data.base_value = baseValue\n    data.real_value = realValue\n    let newMsg = {}\n    newMsg.payload = data\n    node.send(newMsg)\n\n    //记录告警数据源\n    let system_alarm_sources = await global.get(\"mysql_query\")(\"select * from system_alarm_source where spaceId = ? and deviceID = ? and `status` = 0 and deviceAddress = ? limit 1\", [spaceId, device.id, deviceAddress])\n    if (system_alarm_sources[0] == undefined) {\n        let values = [spaceId, type, typeName, deviceID, deviceName, deviceAddress, deviceFullName, alarmCode, alarmMsg, baseUnit, baseValue, realValue, createTime, updateTime]\n        await global.get(\"mysql_query\")(\"insert into system_alarm_source (spaceId, type, typeName, deviceID, deviceName, deviceAddress, deviceFullName, alarmCode, alarmMsg, baseUnit, baseValue, realValue, createTime, updateTime) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?)\", values)\n    } else {\n        await global.get(\"mysql_query\")(\"update system_alarm_source set updateTime = ? where id = ? limit 1\", [createTime, system_alarm_sources[0].id])\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 380,
        "wires": [
            [
                "f7cd3f5565eff6d0"
            ]
        ]
    },
    {
        "id": "f7bc1365a5bdf721",
        "type": "mqtt in",
        "z": "d7f7b9bc5a33ce55",
        "name": "",
        "topic": "/api/request/0a:00:27:00:00:15/KJY1111-CD/#",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "26637148eca75ac1",
        "nl": false,
        "rap": false,
        "rh": "1",
        "inputs": 0,
        "x": 430,
        "y": 4560,
        "wires": [
            [
                "4dee071fc3cb8806",
                "49cbd224c6506746"
            ]
        ]
    },
    {
        "id": "2466260838fd4691",
        "type": "debug",
        "z": "d7f7b9bc5a33ce55",
        "name": "debug 158",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 660,
        "wires": []
    },
    {
        "id": "e9c26a14d5cc8503",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "存储数据库",
        "func": "let items = msg.payload\nif (items && Array.isArray(items) && items.length > 0){\n    for (let i = 0; i < items.length; i++){\n        let item = items[i]\n        if (!item.gateway || !item.layer){\n            continue;\n        }\n        let gateways = await global.get(\"mysql_query\")(\"select * from iot_gateway where macaddr = ? limit 1\", item.gateway)\n        if(gateways[0] == undefined){\n            continue;\n        }\n        let iot_devices = await global.get(\"mysql_query\")(\"select * from iot_device where gatewayID = ? and layer = ? and code = ? limit 1\", [gateways[0].id, item.layer, item.code])\n        if(iot_devices[0] == undefined){\n            continue;\n        }\n        let status = JSON.stringify(item.status)\n        let statusUptime = parseInt(new Date().getTime()/1000)\n        await global.get(\"mysql_query\")(\"update iot_device set status = ? ,statusUptime = ? where id = ? limit 1\", [status, statusUptime, iot_devices[0].id])\n    \n        //统计总用电量\n        if(item.status && item.status.totalPower && item.status.totalKwh){\n            let deviceId = iot_devices[0].id\n            let kwh = item.status.totalKwh\n            let pushDate = moment().format(\"YYYY-MM-DD\")\n            let pushTime = moment().unix()\n            let values = [deviceId, kwh, pushDate, pushTime]\n            await global.get(\"mysql_query\")('insert into iot_power(deviceId, kwh, pushDate, pushTime) values (?,?,?,?)', values)\n\n            let iot_power_days = await global.get(\"mysql_query\")(\"select * from iot_power_day where deviceId = ? and pushDate = ? limit 1\", [deviceId, pushDate])\n            if (iot_power_days[0] == undefined) {\n                let todayKwh = 0\n                let todayPower = item.status.totalPower\n                let totalKwh = kwh\n                let values2 = [deviceId, todayKwh, todayPower, totalKwh, pushDate, pushTime]\n                await global.get(\"mysql_query\")('insert into iot_power_day(deviceId, todayKwh, todayPower, totalKwh, pushDate, pushTime) values (?,?,?,?,?,?)', values2)\n            }else{\n                let todayPower = item.status.totalPower\n                let totalKwh = kwh\n                let todayKwh = parseFloat(parseFloat(iot_power_days[0].todayKwh) + (totalKwh - parseFloat(iot_power_days[0].totalKwh))).toFixed(2)\n                let values2 = [todayPower, totalKwh, todayKwh, pushTime, iot_power_days[0].id]\n                await global.get(\"mysql_query\")('update iot_power_day set todayPower = ?, totalKwh = ?, todayKwh = ?, pushTime = ? where id = ?', values2)\n            }\n        }\n\n        //统计电箱每个回路按照分类的用电量\n        if (item.status && item.status.kwh && item.status.power && item.status.current) {\n            let kwh = item.status.kwh\n            let power = item.status.power\n            let current = item.status.current\n            let iot_power_loop_type_obj = flow.get(\"iot_power_loop_type_obj\")\n            let iot_power_loop_code_obj = flow.get(\"iot_power_loop_code_obj\")\n            let iot_power_loop_name_obj = flow.get(\"iot_power_loop_name_obj\")\n\n            for (let i = 1; i <= 27; i++) {\n                let loop = \"loop\" + i\n                if (kwh[loop] == undefined){\n                    continue\n                }\n                if(!iot_power_loop_type_obj[iot_devices[0].id] || !iot_power_loop_type_obj[iot_devices[0].id][loop]){\n                    continue\n                }\n                let loop_code = \"\"\n                let loop_name = \"\"\n                if (iot_power_loop_code_obj[iot_devices[0].id] && iot_power_loop_code_obj[iot_devices[0].id][loop]) {\n                    loop_code = iot_power_loop_code_obj[iot_devices[0].id][loop]\n                }\n                if (iot_power_loop_name_obj[iot_devices[0].id] && iot_power_loop_name_obj[iot_devices[0].id][loop]) {\n                    loop_name = iot_power_loop_name_obj[iot_devices[0].id][loop]\n                }\n\n                let data = {}\n                data.ts = new Date().getTime()\n                data.position = \"/\" + iot_devices[0].spaceCode + \"/\" + iot_devices[0].areaCode + \"/\" + iot_devices[0].floorCode + \"/\" + iot_devices[0].floorAreaCode + \"/\" + iot_devices[0].name\n                data.space = iot_devices[0].spaceCode\n                data.floor_area = iot_devices[0].areaCode\n                data.floor = iot_devices[0].floorCode\n                data.area = iot_devices[0].floorAreaCode\n                data.device_code = iot_devices[0].code\n                data.device_id = iot_devices[0].id\n                data.power = parseFloat(parseFloat(power[loop]).toFixed(2))\n                data.kwh = parseFloat(parseFloat(kwh[loop]).toFixed(2))\n                data.current = parseFloat(parseFloat(current[loop]).toFixed(2))\n                data.type = iot_power_loop_type_obj[iot_devices[0].id][loop]\n                data.loop = loop\n                data.loop_code = loop_code\n                data.loop_name = loop_name\n                let newMsg = {}\n                newMsg.payload = data\n                node.send(newMsg)\n                await global.get(\"sleep\")(300)\n            }\n        }\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 690,
        "y": 700,
        "wires": [
            [
                "2466260838fd4691",
                "c13b1ee3ce41b649"
            ]
        ]
    },
    {
        "id": "80f002fdc75d9920",
        "type": "mqtt in",
        "z": "d7f7b9bc5a33ce55",
        "name": "卫生间传感器数据接收",
        "topic": "/iot/status/wcsensor/#",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "26637148eca75ac1",
        "nl": false,
        "rap": false,
        "rh": "1",
        "inputs": 0,
        "x": 440,
        "y": 840,
        "wires": [
            [
                "bb7ffdc7001b5914",
                "821c86858c8d2ee0"
            ]
        ]
    },
    {
        "id": "3552da58209dce51",
        "type": "debug",
        "z": "d7f7b9bc5a33ce55",
        "name": "debug 162",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 840,
        "wires": []
    },
    {
        "id": "bb7ffdc7001b5914",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "存储数据库",
        "func": "let items = msg.payload\nif (items && Array.isArray(items) && items.length > 0){\n    for (let i = 0; i < items.length; i++){\n        let item = items[i]\n        if (!item.gateway || !item.layer || !item.status){\n            continue;\n        }\n        let gateways = await global.get(\"mysql_query\")(\"select * from iot_gateway where macaddr = ? limit 1\", item.gateway)\n        if(gateways[0] == undefined){\n            continue;\n        }\n        let iot_devices = await global.get(\"mysql_query\")(\"select * from iot_device where gatewayID = ? and layer = ? and code = ? limit 1\", [gateways[0].id, item.layer, item.code])\n        if (iot_devices[0] == undefined || !iot_devices[0]){\n            continue;\n        }\n        let status = JSON.stringify(item.status)\n        let statusUptime = parseInt(new Date().getTime()/1000)\n        await global.get(\"mysql_query\")(\"update iot_device set status = ? ,statusUptime = ? where id = ? limit 1\", [status, statusUptime, iot_devices[0].id])\n\n        //卫生间使用次数计数\n        let oldStatus = flow.get(\"jsJson\")(iot_devices[0].status)\n        if(oldStatus.status == 0 && item.status.status == 1){\n            let floor_toilet_rooms = await global.get(\"mysql_query\")(\"select * from floor_toilet_room where sensorIndex = ? limit 1\", iot_devices[0].code)\n            if (floor_toilet_rooms[0]){\n                let spaceId = flow.get(\"spaceId\")\n                let toiletId = floor_toilet_rooms[0].toiletId\n                let toiletRoomId = floor_toilet_rooms[0].id\n                let sensorCode = floor_toilet_rooms[0].sensorIndex\n                let useCount = 1\n                let countDate = moment().format(\"YYYY-MM-DD\")\n                let updateTime = parseInt(new Date().getTime() / 1000)\n\n                let iot_toilet_room_uses = await global.get(\"mysql_query\")(\"select * from iot_toilet_room_use where spaceId = ? and toiletId = ? and toiletRoomId = ? and countDate = ? limit 1\", [spaceId, toiletId, toiletRoomId, countDate])\n                if (iot_toilet_room_uses[0] == undefined){\n                    let values = [spaceId, toiletId, toiletRoomId, sensorCode, useCount, countDate, updateTime]\n                    await global.get(\"mysql_query\")(\"insert into iot_toilet_room_use (spaceId, toiletId, toiletRoomId, sensorCode, useCount, countDate, updateTime) values (?,?,?,?,?,?,?)\", values)\n                }else{\n                    useCount = ++iot_toilet_room_uses[0].useCount\n                    await global.get(\"mysql_query\")(\"update iot_toilet_room_use set useCount = ? ,updateTime = ? where id = ? limit 1\", [useCount, updateTime, iot_toilet_room_uses[0].id])\n                }\n            }\n        }\n    }\n}\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 690,
        "y": 840,
        "wires": [
            [
                "3552da58209dce51"
            ]
        ]
    },
    {
        "id": "33db11e01518819b",
        "type": "mqtt in",
        "z": "d7f7b9bc5a33ce55",
        "name": "人体传感器数据接收",
        "topic": "/iot/status/humensensor/#",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "26637148eca75ac1",
        "nl": false,
        "rap": false,
        "rh": "1",
        "inputs": 0,
        "x": 450,
        "y": 960,
        "wires": [
            [
                "69bb360c5d08bedf",
                "50c1c7f58eb2e085"
            ]
        ]
    },
    {
        "id": "a62c24d332b55d3c",
        "type": "debug",
        "z": "d7f7b9bc5a33ce55",
        "name": "debug 164",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 960,
        "wires": []
    },
    {
        "id": "69bb360c5d08bedf",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "存储数据库",
        "func": "let items = msg.payload\nif (items && Array.isArray(items) && items.length > 0){\n    for (let i = 0; i < items.length; i++){\n        let item = items[i]\n        if (!item.gateway || !item.layer){\n            continue;\n        }\n        let gateways = await global.get(\"mysql_query\")(\"select * from iot_gateway where macaddr = ? limit 1\", item.gateway)\n        if(gateways[0] == undefined){\n            continue;\n        }\n        let iot_devices = await global.get(\"mysql_query\")(\"select * from iot_device where gatewayID = ? and layer = ? and code = ? limit 1\", [gateways[0].id, item.layer, item.code])\n        if(iot_devices[0] == undefined){\n            continue;\n        }\n        let status = JSON.stringify(item.status)\n        let statusUptime = parseInt(new Date().getTime()/1000)\n        await global.get(\"mysql_query\")(\"update iot_device set status = ? ,statusUptime = ? where id = ? limit 1\", [status, statusUptime, iot_devices[0].id])\n    }\n}\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 710,
        "y": 960,
        "wires": [
            [
                "a62c24d332b55d3c"
            ]
        ]
    },
    {
        "id": "a63a8e6ffaa36be3",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "卫生间使用情况",
        "func": "let spaceCode = flow.get(\"spaceCode\")\nlet floor_toilets = await global.get(\"mysql_query\")(\"select * from floor_toilet where spaceCode = ?\", [spaceCode])\nif (floor_toilets[0] == undefined){\n    return null\n}\nlet today = moment().format(\"YYYY-MM-DD\")\nfor (let i = 0; i < floor_toilets.length; i++){\n    let iot_toilet_room_uses = await global.get(\"mysql_query\")(\"select sum(`useCount`) as useCount from iot_toilet_room_use where toiletId = ? and countDate = ?\", [floor_toilets[i].id, today])\n    if (iot_toilet_room_uses[0] == undefined || !iot_toilet_room_uses[0].useCount){\n        continue\n    }\n    let data = {}\n    data.useCount = iot_toilet_room_uses[0].useCount\n    let newMsg = {}\n    newMsg.topic = \"/iot/status/wcinfo/\"+floor_toilets[i].spaceCode+\"/\"+floor_toilets[i].areaCode+\"/\"+floor_toilets[i].floorCode+\"/\"+floor_toilets[i].code\n    newMsg.payload = data\n    node.send(newMsg)\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 700,
        "y": 920,
        "wires": [
            [
                "16bbef1edffbb444"
            ]
        ]
    },
    {
        "id": "0e2d7d9cc9fe5aba",
        "type": "inject",
        "z": "d7f7b9bc5a33ce55",
        "name": "定时推送卫生间使用数据",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "360",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 430,
        "y": 920,
        "wires": [
            [
                "a63a8e6ffaa36be3"
            ]
        ]
    },
    {
        "id": "16bbef1edffbb444",
        "type": "mqtt out",
        "z": "d7f7b9bc5a33ce55",
        "name": "",
        "topic": "",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "26637148eca75ac1",
        "x": 1070,
        "y": 920,
        "wires": []
    },
    {
        "id": "b26f36a1ef53ac58",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "电量使用情况",
        "func": "let spaceCode = flow.get(\"spaceCode\")\nlet today = moment().format(\"YYYY-MM-DD\")\nlet iot_power_days = await global.get(\"mysql_query\")(\"select * from iot_power_day where pushDate = ?\", [today])\nif (iot_power_days[0] == undefined) {\n    return null\n}\nlet iot_power_days_obj = {}\nfor (let i = 0; i < iot_power_days.length; i++){\n    iot_power_days_obj[iot_power_days[i].deviceId] = iot_power_days[i]\n}\n\nlet iot_devices = await global.get(\"mysql_query\")(\"select * from iot_device where spaceCode = ? and type = 'powersensor' and deleteFlag = 1\", [spaceCode])\nif (iot_devices[0] == undefined){\n    return null\n}\nlet result = {}\nfor (let i = 0; i < iot_devices.length; i++){\n    let key = iot_devices[i].spaceCode + \"_\" + iot_devices[i].areaCode + \"_\" + iot_devices[i].floorCode\n    if (result[key] == undefined){\n        result[key] = {}\n    }\n    result[key].spaceCode = iot_devices[i].spaceCode\n    result[key].areaCode = iot_devices[i].areaCode\n    result[key].floorCode = iot_devices[i].floorCode\n    result[key].todayKwh = 0\n    result[key].todayPower = 0\n    if (iot_power_days_obj[iot_devices[i].id]){\n        result[key].todayKwh += parseFloat(iot_power_days_obj[iot_devices[i].id].todayKwh)\n        result[key].todayPower += parseFloat(iot_power_days_obj[iot_devices[i].id].todayPower)\n    }\n}\n\nObject.keys(result).forEach(function(k) {\n    let data = {}\n    data.todayKwh = result[k].todayKwh\n    data.todayPower = result[k].todayPower\n    let newMsg = {}\n    newMsg.topic = \"/iot/status/power/\" + result[k].spaceCode + \"/\" + result[k].areaCode + \"/\" + result[k].floorCode\n    newMsg.payload = data\n    node.send(newMsg)\n});",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 700,
        "y": 800,
        "wires": [
            [
                "80d3d8fe8d0cf1d5"
            ]
        ]
    },
    {
        "id": "197c87bdcdaf55eb",
        "type": "inject",
        "z": "d7f7b9bc5a33ce55",
        "name": "定时推送电量数据",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 450,
        "y": 800,
        "wires": [
            [
                "b26f36a1ef53ac58"
            ]
        ]
    },
    {
        "id": "80d3d8fe8d0cf1d5",
        "type": "mqtt out",
        "z": "d7f7b9bc5a33ce55",
        "name": "",
        "topic": "",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "26637148eca75ac1",
        "x": 1070,
        "y": 800,
        "wires": []
    },
    {
        "id": "0c39f8b6fa13c90b",
        "type": "mqtt out",
        "z": "d7f7b9bc5a33ce55",
        "name": "",
        "topic": "/iot/humensensor/data/report",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "26637148eca75ac1",
        "x": 1160,
        "y": 1000,
        "wires": []
    },
    {
        "id": "50c1c7f58eb2e085",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "人体数据推送至TD引擎",
        "func": "if(msg.payload && Array.isArray(msg.payload)){\n    let devices = msg.payload\n    for(let i = 0; i < devices.length; i++){\n        let gateways = await global.get(\"mysql_query\")(\"select * from iot_gateway where macaddr = ? limit 1\", devices[i].gateway)\n        if(gateways[0] == undefined){\n            continue;\n        }\n        let iot_devices = await global.get(\"mysql_query\")(\"select * from iot_device where gatewayID = ? and layer = ? and code = ? limit 1\", [gateways[0].id, devices[i].layer, devices[i].code])\n        if(iot_devices[0] == undefined){\n            continue;\n        }\n        let status = devices[i].status\n        if(!status || status.length <= 0){\n            continue\n        }\n        //不在线或状态不对的不记录\n        if (status.online != \"1\" || (status.status != \"busy\" && status.status != \"free\")){\n            continue\n        }\n        let data = {}\n        data.ts = new Date().getTime()\n        data.position = \"/\" + iot_devices[0].spaceCode + \"/\" + iot_devices[0].areaCode + \"/\" + iot_devices[0].floorCode + \"/\" + iot_devices[0].floorAreaCode +\"/\" + iot_devices[0].name\n        data.space = iot_devices[0].spaceCode\n        data.floor_area = iot_devices[0].areaCode\n        data.floor = iot_devices[0].floorCode\n        data.area = iot_devices[0].floorAreaCode\n        data.device_code = iot_devices[0].code\n        data.device_id = iot_devices[0].id\n        if(status.status == \"busy\"){\n            data.status = 1\n        }else if(status.status == \"free\"){\n            data.status = 0\n        }\n        \n        let newMsg = {}\n        newMsg.payload = data\n        node.send(newMsg)\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1000,
        "wires": [
            [
                "0c39f8b6fa13c90b"
            ]
        ]
    },
    {
        "id": "98fdc35eb665f0f4",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "获取属地所有区域",
        "func": "let result = []\nlet spaces = await global.get(\"mysql_query\")(\"select * from space where deleteFlag = 1\")\nfor (let i = 0; i < spaces.length; i++){\n    let space = {}\n    space.name = spaces[i].name\n    space.code = spaces[i].code\n    space.floorArea = []\n    let areas = await global.get(\"mysql_query\")(\"select * from area where spaceCode = ? and deleteFlag = 1 order by code ASC\", spaces[i].code)\n    for(let j = 0; j < areas.length; j++){\n        let area = {}\n        area.name = areas[j].name\n        area.code = areas[j].code\n        area.floor = []\n        let floors = await global.get(\"mysql_query\")(\"select * from floor where spaceCode = ? and areaCode = ? and deleteFlag = 1 order by code ASC\", [spaces[i].code, areas[j].code])\n        for (let k = 0; k < floors.length; k++){\n            let floor = {}\n            floor.name = floors[k].name\n            floor.code = floors[k].code\n            floor.area = await global.get(\"mysql_query\")(\"select * from floor_area where spaceCode = ? and areaCode = ? and floorCode = ? and deleteFlag = 1 order by code ASC\", [spaces[i].code, areas[j].code, floors[k].code])\n            floor.mettingRoom = await global.get(\"mysql_query\")(\"select * from floor_mroom where spaceCode = ? and areaCode = ? and floorCode = ? and deleteFlag = 1 order by code ASC\", [spaces[i].code, areas[j].code, floors[k].code])\n            floor.toilet = await global.get(\"mysql_query\")(\"select * from floor_toilet where spaceCode = ? and areaCode = ? and floorCode = ? and deleteFlag = 1 order by code ASC\", [spaces[i].code, areas[j].code, floors[k].code])\n            floor.room = await global.get(\"mysql_query\")(\"select * from floor_room where spaceCode = ? and areaCode = ? and floorCode = ? and deleteFlag = 1 order by code ASC\", [spaces[i].code, areas[j].code, floors[k].code])\n            area.floor.push(floor)\n        }\n        space.floorArea.push(area)\n    }\n    result.push(space)\n}\nmsg.payload = result\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1340,
        "wires": [
            [
                "0a103e6533e7b22f"
            ]
        ]
    },
    {
        "id": "49f15bbd7ffcba69",
        "type": "mqtt in",
        "z": "d7f7b9bc5a33ce55",
        "name": "空间结构初始化数据入口",
        "topic": "/iot/setting/get/structure",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "26637148eca75ac1",
        "nl": false,
        "rap": false,
        "rh": "1",
        "inputs": 0,
        "x": 450,
        "y": 1340,
        "wires": [
            [
                "98fdc35eb665f0f4"
            ]
        ]
    },
    {
        "id": "0a103e6533e7b22f",
        "type": "mqtt out",
        "z": "d7f7b9bc5a33ce55",
        "name": "空间结构初始化数据出口",
        "topic": "/iot/setting/structure/result",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "26637148eca75ac1",
        "x": 1070,
        "y": 1340,
        "wires": []
    },
    {
        "id": "ee4ff60300467c80",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "获取区域所有设备",
        "func": "let spaceCode = msg.payload.spaceCode\nlet areaCode = msg.payload.floorAreaCode\nlet floorCode = msg.payload.floorCode\nlet floorAreaCode = msg.payload.areaCode\nlet iot_gateways = await global.get(\"mysql_query\")(\"select id,macaddr from iot_gateway where deleteFlag = 1 \")\nlet iot_gateways_obj = {}\nfor(let i = 0; i < iot_gateways.length; i++){\n    iot_gateways_obj[iot_gateways[i].id] = iot_gateways[i]\n}\n\nlet iot_devices = await global.get(\"mysql_query\")(\"select * from iot_device where deleteFlag = 1 and spaceCode =? and areaCode =? and floorCode = ? and floorAreaCode = ?\", [spaceCode, areaCode, floorCode, floorAreaCode])\nlet result = {}\nfor(let i = 0; i < iot_devices.length; i++){\n    if(result[iot_devices[i].type] == undefined){\n        result[iot_devices[i].type] = []\n    }\n    if (iot_gateways_obj[iot_devices[i].gatewayID]){\n        iot_devices[i].gatewayMac = iot_gateways_obj[iot_devices[i].gatewayID].macaddr\n    }\n    result[iot_devices[i].type].push(iot_devices[i])\n}\nmsg.topic = \"/iot/setting/device/\" + spaceCode + \"/\" + areaCode + \"/\" + floorCode + \"/\" + floorAreaCode\nmsg.payload = result\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1380,
        "wires": [
            [
                "4dbeb7e5c5e3d0d7"
            ]
        ]
    },
    {
        "id": "fdd6c4baa84ff3c1",
        "type": "mqtt in",
        "z": "d7f7b9bc5a33ce55",
        "name": "区域所有设备入口",
        "topic": "/iot/setting/get/device",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "26637148eca75ac1",
        "nl": false,
        "rap": false,
        "rh": "1",
        "inputs": 0,
        "x": 430,
        "y": 1380,
        "wires": [
            [
                "ee4ff60300467c80"
            ]
        ]
    },
    {
        "id": "4dbeb7e5c5e3d0d7",
        "type": "mqtt out",
        "z": "d7f7b9bc5a33ce55",
        "name": "区域所有设备出口",
        "topic": "",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "26637148eca75ac1",
        "x": 1050,
        "y": 1380,
        "wires": []
    },
    {
        "id": "8aa0c9966fdffb62",
        "type": "mqtt in",
        "z": "d7f7b9bc5a33ce55",
        "name": "烟雾传感器数据接收",
        "topic": "/iot/status/smokesensor/#",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "26637148eca75ac1",
        "nl": false,
        "rap": false,
        "rh": "1",
        "inputs": 0,
        "x": 450,
        "y": 1040,
        "wires": [
            [
                "f43dbd299b9ce109",
                "3ff743972581a4e5"
            ]
        ]
    },
    {
        "id": "79831cfd6a5a31d1",
        "type": "debug",
        "z": "d7f7b9bc5a33ce55",
        "name": "debug 178",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 1040,
        "wires": []
    },
    {
        "id": "f43dbd299b9ce109",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "存储数据库",
        "func": "let items = msg.payload\nif (items && Array.isArray(items) && items.length > 0){\n    for (let i = 0; i < items.length; i++){\n        let item = items[i]\n        if (!item.gateway || !item.layer){\n            continue;\n        }\n        let gateways = await global.get(\"mysql_query\")(\"select * from iot_gateway where macaddr = ? limit 1\", item.gateway)\n        if(gateways[0] == undefined){\n            continue;\n        }\n        let iot_devices = await global.get(\"mysql_query\")(\"select * from iot_device where gatewayID = ? and layer = ? and code = ? limit 1\", [gateways[0].id, item.layer, item.code])\n        if(iot_devices[0] == undefined){\n            continue;\n        }\n        let status = JSON.stringify(item.status)\n        let statusUptime = parseInt(new Date().getTime()/1000)\n        await global.get(\"mysql_query\")(\"update iot_device set status = ? ,statusUptime = ? where id = ? limit 1\", [status, statusUptime, iot_devices[0].id])\n    }\n}\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 710,
        "y": 1040,
        "wires": [
            [
                "79831cfd6a5a31d1"
            ]
        ]
    },
    {
        "id": "dbccda87f84a95ab",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "电量数据推送至TD引擎",
        "func": "if(msg.payload && Array.isArray(msg.payload)){\n    let devices = msg.payload\n    for(let i = 0; i < devices.length; i++){\n        let gateways = await global.get(\"mysql_query\")(\"select * from iot_gateway where macaddr = ? limit 1\", devices[i].gateway)\n        if(gateways[0] == undefined){\n            continue;\n        }\n        let iot_devices = await global.get(\"mysql_query\")(\"select * from iot_device where gatewayID = ? and layer = ? and code = ? limit 1\", [gateways[0].id, devices[i].layer, devices[i].code])\n        if(iot_devices[0] == undefined){\n            continue;\n        }\n        let status = devices[i].status\n        if(!status || status.length <= 0){\n            continue\n        }\n        let data = {}\n        data.ts = new Date().getTime()\n        data.position = \"/\" + iot_devices[0].spaceCode + \"/\" + iot_devices[0].areaCode + \"/\" + iot_devices[0].floorCode + \"/\" + iot_devices[0].floorAreaCode +\"/\" + iot_devices[0].name\n        data.space = iot_devices[0].spaceCode\n        data.floor_area = iot_devices[0].areaCode\n        data.floor = iot_devices[0].floorCode\n        data.area = iot_devices[0].floorAreaCode\n        data.device_code = iot_devices[0].code\n        data.device_id = iot_devices[0].id\n        if(status.voltage){\n            data.voltage1 = parseFloat(parseFloat(status.voltage.A).toFixed(2))\n            data.voltage2 = parseFloat(parseFloat(status.voltage.B).toFixed(2))\n            data.voltage3 = parseFloat(parseFloat(status.voltage.C).toFixed(2))\n        }\n        if(status.power){\n            for(let i = 1; i <= 27; i++){\n                data[\"power\" + i] = parseFloat(parseFloat(status.power[\"loop\" + i]).toFixed(2))\n            }\n        }\n        if(status.current){\n            for(let i = 1; i <= 27; i++){\n                data[\"current\" + i] = parseFloat(parseFloat(status.current[\"loop\" + i]).toFixed(2))\n            }\n        }\n        if(status.kwh){\n            for(let i = 1; i <= 27; i++){\n                data[\"kwh\" + i] = parseFloat(parseFloat(status.kwh[\"loop\" + i]).toFixed(2))\n            }\n        }\n\n        if(status.totalPower != undefined){\n            data.total_power = parseFloat(parseFloat(status.totalPower).toFixed(2))\n        }\n        if (status.totalKwh != undefined){\n            data.total_kwh = parseFloat(parseFloat(status.totalKwh).toFixed(2))\n        }\n        let newMsg = {}\n        newMsg.payload = data\n        node.send(newMsg)\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fs",
                "module": "fs"
            }
        ],
        "x": 730,
        "y": 740,
        "wires": [
            [
                "168f5b8e3c3aa46f"
            ]
        ]
    },
    {
        "id": "168f5b8e3c3aa46f",
        "type": "mqtt out",
        "z": "d7f7b9bc5a33ce55",
        "name": "",
        "topic": "/iot/powersensor/data/report",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "26637148eca75ac1",
        "x": 1140,
        "y": 740,
        "wires": []
    },
    {
        "id": "3ff743972581a4e5",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "烟雾数据推送至TD引擎",
        "func": "if (msg.payload && Array.isArray(msg.payload)) {\n    let devices = msg.payload\n    for (let i = 0; i < devices.length; i++) {\n        let gateways = await global.get(\"mysql_query\")(\"select * from iot_gateway where macaddr = ? limit 1\", devices[i].gateway)\n        if (gateways[0] == undefined) {\n            continue;\n        }\n        let iot_devices = await global.get(\"mysql_query\")(\"select * from iot_device where gatewayID = ? and layer = ? and code = ? limit 1\", [gateways[0].id, devices[i].layer, devices[i].code])\n        if (iot_devices[0] == undefined) {\n            continue;\n        }\n        let status = devices[i].status\n        if(!status || status.length <= 0){\n            continue\n        }\n        if(status.smoke == undefined){\n            continue\n        }\n\n        let msgArr = [null, null]\n        let data = {}\n        data.ts = new Date().getTime()\n        data.position = \"/\" + iot_devices[0].spaceCode + \"/\" + iot_devices[0].areaCode + \"/\" + iot_devices[0].floorCode + \"/\" + iot_devices[0].floorAreaCode + \"/\" + iot_devices[0].name\n        data.space = iot_devices[0].spaceCode\n        data.floor_area = iot_devices[0].areaCode\n        data.floor = iot_devices[0].floorCode\n        data.area = iot_devices[0].floorAreaCode\n        data.device_code = iot_devices[0].code\n        data.device_id = iot_devices[0].id\n        data.smoke = parseInt(status.smoke)\n        let newMsg = {}\n        newMsg.payload = data\n        msgArr[0] = newMsg\n\n        // let validFloors = [\"23F\", \"24F\", \"25F\", \"26F\", \"27F\", \"28F\", \"29F\", \"30F\", \"31F\", \"32F\"]\n\n        if (data.smoke === 1){\n\n            if (iot_devices[0].floorCode == \"54F\" && iot_devices[0].floorAreaCode == \"TWOMAN\"){\n                continue\n            }\n            if (iot_devices[0].floorCode == \"41F\" && iot_devices[0].floorAreaCode == \"TMAN\") {\n                continue\n            }\n\n            //记录到告警中心\n            let uuid = flow.get(\"uuid\")()\n            let spaceCode = iot_devices[0].spaceCode\n            let floorAreaCode = iot_devices[0].areaCode\n            let floorCode = iot_devices[0].floorCode\n            let areaCode = iot_devices[0].floorAreaCode\n            let sourceName = iot_devices[0].name\n            let classify = \"fire\"\n            let classifyName = \"消防告警\"\n            let emergentType = \"烟雾探测\"\n            let floorCodeNum = parseInt(floorCode)\n            let floorName = floorCode\n            if (floorCodeNum) {\n                floorName = floorCodeNum + \"楼\"\n            }\n            let emergentContent = \"请注意\" + floorName + sourceName + \"产生报警，请立即前往！\"\n            let voiceText = emergentContent  //语音文本规则？\n            let voiceUrl = \"\"\n            if (status.smokingSourceImg) {\n                voiceUrl = status.smokingSourceImg\n            }\n            let happenDate = moment().format(\"YYYY-MM-DD\")\n            let happenTime = moment().format(\"YYYY-MM-DD HH:mm:ss\")\n            let createTime = parseInt(new Date().getTime() / 1000)\n            let values = [uuid, spaceCode, floorAreaCode, floorCode, areaCode, sourceName, classify, classifyName, emergentType, emergentContent, voiceText, voiceUrl, happenDate, happenTime, createTime]\n\n            let system_emergents = await global.get(\"mysql_query\")(\"select * from system_emergent where spaceCode = ? and floorAreaCode = ? and floorCode = ? and areaCode = ? and sourceName = ? and classify = ? and emergentType = ? and status != 2 and status != 3 limit 1\", [spaceCode, floorAreaCode, floorCode, areaCode, sourceName, classify, emergentType])\n            if (system_emergents[0] == undefined) {\n                await global.get(\"mysql_query\")('insert into system_emergent (uuid, spaceCode, floorAreaCode, floorCode, areaCode, sourceName, classify, classifyName, emergentType, emergentContent, voiceText, voiceUrl, happenDate, happenTime, createTime) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)', values)\n                let pushMsg = {}\n                pushMsg.payload = {\n                    uuid: uuid,\n                    spaceCode: spaceCode,\n                    floorAreaCode: floorAreaCode,\n                    floorCode: floorCode,\n                    areaCode: areaCode,\n                    sourceName: sourceName,\n                    happenTime: happenTime,\n                    message: emergentContent\n                }\n                msgArr[1] = pushMsg\n            }\n        }\n        node.send(msgArr)\n    }\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fs",
                "module": "fs"
            },
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 750,
        "y": 1080,
        "wires": [
            [
                "41a92b5dbf37ae95"
            ],
            [
                "6c4416196772e805",
                "1d717f9805058996"
            ]
        ]
    },
    {
        "id": "41a92b5dbf37ae95",
        "type": "mqtt out",
        "z": "d7f7b9bc5a33ce55",
        "name": "",
        "topic": "/iot/smokesensor/data/report",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "26637148eca75ac1",
        "x": 1160,
        "y": 1080,
        "wires": []
    },
    {
        "id": "821c86858c8d2ee0",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "厕位数据推送至TD引擎",
        "func": "if(msg.payload && Array.isArray(msg.payload)){\n    let devices = msg.payload\n    for(let i = 0; i < devices.length; i++){\n        let gateways = await global.get(\"mysql_query\")(\"select * from iot_gateway where macaddr = ? limit 1\", devices[i].gateway)\n        if(gateways[0] == undefined){\n            continue;\n        }\n        let iot_devices = await global.get(\"mysql_query\")(\"select * from iot_device where gatewayID = ? and layer = ? and code = ? limit 1\", [gateways[0].id, devices[i].layer, devices[i].code])\n        if(iot_devices[0] == undefined){\n            continue;\n        }\n        let status = devices[i].status\n        if (!status || status.status == undefined){\n            continue\n        }\n        let data = {}\n        data.ts = new Date().getTime()\n        data.position = \"/\" + iot_devices[0].spaceCode + \"/\" + iot_devices[0].areaCode + \"/\" + iot_devices[0].floorCode + \"/\" + iot_devices[0].floorAreaCode +\"/\" + iot_devices[0].name\n        data.space = iot_devices[0].spaceCode\n        data.floor_area = iot_devices[0].areaCode\n        data.floor = iot_devices[0].floorCode\n        data.area = iot_devices[0].floorAreaCode\n        data.device_code = iot_devices[0].code\n        data.device_id = iot_devices[0].id\n        data.status = parseInt(status.status)\n        let newMsg = {}\n        newMsg.payload = data\n        node.send(newMsg)\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fs",
                "module": "fs"
            }
        ],
        "x": 730,
        "y": 880,
        "wires": [
            [
                "acc943b6b6a77dd8"
            ]
        ]
    },
    {
        "id": "acc943b6b6a77dd8",
        "type": "mqtt out",
        "z": "d7f7b9bc5a33ce55",
        "name": "",
        "topic": "/iot/wcsensor/data/report",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "26637148eca75ac1",
        "x": 1130,
        "y": 880,
        "wires": []
    },
    {
        "id": "de4753402f4e41e1",
        "type": "mqtt out",
        "z": "d7f7b9bc5a33ce55",
        "name": "",
        "topic": "/iot/action/airconditioning/HGH-WC/A3/26F/CK/茶水间仓库",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "26637148eca75ac1",
        "x": 1070,
        "y": 3540,
        "wires": []
    },
    {
        "id": "e41570dfb415d01d",
        "type": "inject",
        "z": "d7f7b9bc5a33ce55",
        "name": "开42F空调",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 500,
        "y": 3520,
        "wires": [
            [
                "2bcaf6181f8bee8d"
            ]
        ]
    },
    {
        "id": "2bcaf6181f8bee8d",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "function 12",
        "func": "msg.payload = {\n    \"action\":\"on\",\n    \"temperature\":23,\n    \"mode\":\"3\",\n    \"fan\":45\n}\nmsg.payload = JSON.stringify(msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 3520,
        "wires": [
            [
                "de4753402f4e41e1"
            ]
        ]
    },
    {
        "id": "eb5159ce754e03e7",
        "type": "inject",
        "z": "d7f7b9bc5a33ce55",
        "name": "关42F空调",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 500,
        "y": 3580,
        "wires": [
            [
                "01e3ccd4cf03b237"
            ]
        ]
    },
    {
        "id": "01e3ccd4cf03b237",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "function 13",
        "func": "msg.payload = {\n    \"action\":\"off\"\n}\nmsg.payload = JSON.stringify(msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 3580,
        "wires": [
            [
                "de4753402f4e41e1"
            ]
        ]
    },
    {
        "id": "c7e9663d53bbec73",
        "type": "mqtt in",
        "z": "d7f7b9bc5a33ce55",
        "name": "智能平板状态数据接收",
        "topic": "/iot/status/pad/HGH-WC/#",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "26637148eca75ac1",
        "nl": false,
        "rap": false,
        "rh": "1",
        "inputs": 0,
        "x": 500,
        "y": 1640,
        "wires": [
            [
                "4ee8d1d13e73fd8e",
                "b54a76e09b404559"
            ]
        ]
    },
    {
        "id": "64e41a7293b859b2",
        "type": "mqtt out",
        "z": "d7f7b9bc5a33ce55",
        "name": "",
        "topic": "/iot/action/blind/HGH-WC/A3/23F/B/智界窗帘电机智控器1",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "26637148eca75ac1",
        "x": 1070,
        "y": 3300,
        "wires": []
    },
    {
        "id": "fd93d7fc310c6044",
        "type": "inject",
        "z": "d7f7b9bc5a33ce55",
        "name": "开42F灯",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 500,
        "y": 3280,
        "wires": [
            [
                "0bea6ca32de46244"
            ]
        ]
    },
    {
        "id": "0bea6ca32de46244",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "function 14",
        "func": "msg.payload = {\n    \"action\":\"on\"\n}\nmsg.payload = JSON.stringify(msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 3280,
        "wires": [
            [
                "64e41a7293b859b2"
            ]
        ]
    },
    {
        "id": "e2f12445ab878211",
        "type": "inject",
        "z": "d7f7b9bc5a33ce55",
        "name": "关42F灯",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 500,
        "y": 3340,
        "wires": [
            [
                "406a881b1f778fe3"
            ]
        ]
    },
    {
        "id": "406a881b1f778fe3",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "function 15",
        "func": "msg.payload = {\n    \"action\":\"off\"\n}\nmsg.payload = JSON.stringify(msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 3340,
        "wires": [
            [
                "64e41a7293b859b2"
            ]
        ]
    },
    {
        "id": "4cbab8ee9d1cd2c8",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "全局参数生成",
        "func": "//当前属地ID\nlet spaceCode = flow.get(\"spaceCode\")\nlet spaces = await global.get(\"mysql_query\")('select * from space where code = ? limit 1', [spaceCode])\nif (spaces[0] != undefined) {\n    flow.set(\"spaceId\", spaces[0].id)\n    msg.spaceId = spaces[0].id\n}\n\n//告警信息提醒对应人\nlet spaceId = flow.get(\"spaceId\")\nlet system_alarm_users = await global.get(\"mysql_query\")('select * from system_alarm_user where spaceId = ?', [spaceId])\nlet alarm_type_users = {}\nfor (let i = 0; i < system_alarm_users.length; i++){\n    if (alarm_type_users[system_alarm_users[i].type] == undefined){\n        alarm_type_users[system_alarm_users[i].type] = []\n    }\n    alarm_type_users[system_alarm_users[i].type].push(system_alarm_users[i])\n}\nflow.set(\"alarm_type_users\", alarm_type_users)\n\n\n// //网关信息\n// let gateways = await global.get(\"mysql_query\")(\"select * from iot_gateway where deleteFlag = 1\")\n// let iotGatewayIdsObj = {}\n// let iotGatewayMacsObj = {}\n// for (let i = 0; i < gateways.length; i++){\n//     iotGatewayMacsObj[gateways[i].macaddr] = gateways[i]\n//     iotGatewayIdsObj[gateways[i].id] = gateways[i]\n// }\n// global.set(\"iotGatewayIdsObj\", iotGatewayIdsObj)\n// global.set(\"iotGatewayMacsObj\", iotGatewayMacsObj)\n// msg.iotGatewayIdsObj = iotGatewayIdsObj\n// msg.iotGatewayMacsObj = iotGatewayMacsObj\n\n\n// let iot_devices = await global.get(\"mysql_query\")(\"select * from iot_device where deleteFlag = 1\")\n// let iotDevicesObj = {}\n// for (let i = 0; i < iot_devices.length; i++) {\n//     let iot_device = iot_devices[i]\n//     if (!iotGatewayIdsObj[iot_device.gatewayID]){\n//         continue\n//     }\n//     let macaddr = iotGatewayIdsObj[iot_device.gatewayID].macaddr\n//     if (iotDevicesObj[macaddr] == undefined) {\n//         iotDevicesObj[macaddr] = {}\n//     }\n//     iotDevicesObj[macaddr][iot_device.code] = iot_devices[i]\n// }\n// global.set(\"iotDevicesObj\", iotDevicesObj)\n// msg.iotDevicesObj = iotDevicesObj\n\nmsg.alarm_type_users = alarm_type_users\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 80,
        "wires": [
            [
                "f42a8cf4d98f90d4"
            ]
        ]
    },
    {
        "id": "0a0f8155a9eac4c7",
        "type": "inject",
        "z": "d7f7b9bc5a33ce55",
        "name": "",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 490,
        "y": 80,
        "wires": [
            [
                "4cbab8ee9d1cd2c8"
            ]
        ]
    },
    {
        "id": "f42a8cf4d98f90d4",
        "type": "debug",
        "z": "d7f7b9bc5a33ce55",
        "name": "debug 182",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 80,
        "wires": []
    },
    {
        "id": "1dc8ea88a7d65edb",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "数据处理",
        "func": "let data = msg.payload\nif(!data || !data.sourceName || !data.emergentContent){\n    return\n}\nlet uuid = flow.get(\"uuid\")()\nlet spaceCode = data.spaceCode ? data.spaceCode : \"\"\nlet floorAreaCode = data.floorAreaCode ? data.floorAreaCode : \"\"\nlet floorCode = data.floorCode ? data.floorCode : \"\"\nlet areaCode = data.areaCode ? data.areaCode : \"\"\nlet sourceName = data.sourceName ? data.sourceName : \"\"\nlet classify = \"security\"\nlet classifyName = \"安防告警\"\nlet emergentType = data.emergentType\nlet emergentContent = data.emergentContent\nlet voiceText = data.emergentContent  //语音文本规则？\nlet voiceUrl = \"\"\nlet happenDate = moment().format(\"YYYY-MM-DD\")\nlet happenTime = moment().format(\"YYYY-MM-DD HH:mm:ss\")\nlet createTime = parseInt(new Date().getTime() / 1000)\nlet values = [uuid, spaceCode, floorAreaCode, floorCode, areaCode, sourceName, classify, classifyName, emergentType, emergentContent, voiceText, voiceUrl, happenDate, happenTime, createTime]\nawait global.get(\"mysql_query\")('insert into system_emergent (uuid, spaceCode, floorAreaCode, floorCode, areaCode, sourceName, classify, classifyName, emergentType, emergentContent, voiceText, voiceUrl, happenDate, happenTime, createTime) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)', values)\n\nlet msgArr = [null, null]\n//生成tts语音\nlet ttsMsg = {}\nttsMsg.payload = {\n    uuid:uuid,\n    type:classify,\n    message:voiceText\n}\nmsgArr[0] = ttsMsg\n\n//推送终端\nlet pushMsg = {}\npushMsg.payload = {\n    uuid:uuid,\n    spaceCode: spaceCode,\n    floorAreaCode: floorAreaCode,\n    floorCode: floorCode,\n    areaCode: areaCode,\n    sourceName: sourceName,\n    happenTime:happenTime,\n    message:emergentContent\n}\nmsgArr[1] = pushMsg\nnode.send(msgArr)\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "CryptoJS",
                "module": "crypto-js"
            },
            {
                "var": "WebSocket",
                "module": "ws"
            },
            {
                "var": "fs",
                "module": "fs"
            },
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 700,
        "y": 1280,
        "wires": [
            [],
            [
                "199c41bf24fb4ce6"
            ]
        ]
    },
    {
        "id": "171dbe5ac4c59afa",
        "type": "mqtt in",
        "z": "d7f7b9bc5a33ce55",
        "name": "安防告警接收",
        "topic": "/iot/action/emergent/security",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "26637148eca75ac1",
        "nl": false,
        "rap": false,
        "rh": "1",
        "inputs": 0,
        "x": 430,
        "y": 1280,
        "wires": [
            [
                "1dc8ea88a7d65edb"
            ]
        ]
    },
    {
        "id": "96fbf16bd96ad16a",
        "type": "mqtt out",
        "z": "d7f7b9bc5a33ce55",
        "name": "推送数据出口",
        "topic": "",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "26637148eca75ac1",
        "x": 1120,
        "y": 1240,
        "wires": []
    },
    {
        "id": "60af98eb86e030f2",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "拆分数据",
        "func": "let spaceCode = flow.get(\"spaceCode\")\nlet repair_clean_logs = await global.get(\"mysql_query\")(\"select * from repair_clean_log where spaceCode = ?\", [spaceCode])\nfor(let i = 0; i < repair_clean_logs.length; i++){\n    let log = repair_clean_logs[i]\n    if(!log.spaceCode || !log.floorAreaCode || !log.floorCode || !log.areaCode){\n        await global.get(\"mysql_query\")(\"delete from repair_clean_log where id = ?\", [log.id])\n        continue\n    }\n    let data = {}\n    data.empName = log.empName\n    data.endTime = log.endTime\n    data.updateTime = log.updateTime\n    msg.topic = \"/iot/status/cleaning/\"+log.spaceCode+\"/\"+log.floorAreaCode+\"/\"+log.floorCode+\"/\"+log.areaCode\n    msg.payload = data\n    node.send(msg)\n    await global.get(\"sleep\")(200)\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 1240,
        "wires": [
            [
                "96fbf16bd96ad16a",
                "5c3b9cb0b298350c"
            ]
        ]
    },
    {
        "id": "bd974d1fee5e33c6",
        "type": "inject",
        "z": "d7f7b9bc5a33ce55",
        "name": "定时推送报修保洁数据",
        "props": [],
        "repeat": "360",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 450,
        "y": 1240,
        "wires": [
            [
                "60af98eb86e030f2"
            ]
        ]
    },
    {
        "id": "199c41bf24fb4ce6",
        "type": "mqtt out",
        "z": "d7f7b9bc5a33ce55",
        "name": "推送到监控终端",
        "topic": "/emergent/status/security/message",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "26637148eca75ac1",
        "x": 1120,
        "y": 1280,
        "wires": []
    },
    {
        "id": "f59be9b6a8012021",
        "type": "inject",
        "z": "d7f7b9bc5a33ce55",
        "name": "临时添加告警提醒人员",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 420,
        "y": 3220,
        "wires": [
            [
                "74482d4e83c74039"
            ]
        ]
    },
    {
        "id": "74482d4e83c74039",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "function 16",
        "func": "let empNos = [\"0361999\"]\nlet auths = [\"1\",\"2\",\"3\"]\nfor(let i = 0; i < empNos.length; i++){\n    let users = await global.get(\"mysql_query\")(\"select * from user where empNo = ? or virtualEmpNo = ? limit 1\", [empNos[i], empNos[i]])\n    if (!users[0] || !users[0].id){\n        continue\n    }\n    for(let j = 0; j < auths.length; j++){\n        let spaceId = \"7\"\n        let type = auths[j]\n        let userId = users[0].userId\n        let userName = users[0].realName\n        let empNo = empNos[i]\n        let createTime = parseInt(new Date().getTime()/1000)\n        let system_alarm_users = await global.get(\"mysql_query\")(\"select * from system_alarm_user where userId = ? and type = ? limit 1\", [userId, type])\n        if (system_alarm_users[0] && system_alarm_users[0].id){\n            continue\n        }\n        let values = [spaceId, type, userId, userName, empNo, createTime]\n        await global.get(\"mysql_query\")(\"insert into system_alarm_user (spaceId, type, userId, userName, empNo, createTime) values (?,?,?,?,?,?)\", values)\n    }\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 3220,
        "wires": [
            [
                "6752e1050cf0afe6"
            ]
        ]
    },
    {
        "id": "6752e1050cf0afe6",
        "type": "debug",
        "z": "d7f7b9bc5a33ce55",
        "name": "debug 184",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 3220,
        "wires": []
    },
    {
        "id": "5c3b9cb0b298350c",
        "type": "debug",
        "z": "d7f7b9bc5a33ce55",
        "name": "debug 185",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 1240,
        "wires": []
    },
    {
        "id": "562d109a26ab7d1e",
        "type": "inject",
        "z": "d7f7b9bc5a33ce55",
        "name": "定时清理冗余告警数据",
        "props": [],
        "repeat": "",
        "crontab": "45 23 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 530,
        "y": 1580,
        "wires": [
            [
                "1cb50e103722fcea"
            ]
        ]
    },
    {
        "id": "1cb50e103722fcea",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "告警日志只保留一个月数据",
        "func": "let createTime = parseInt(moment().add(-1, 'd') / 1000);\nawait global.get(\"mysql_query\")(\"delete from system_alarm where createTime < ?\", [createTime])\nmsg.createTime = createTime\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 820,
        "y": 1580,
        "wires": [
            [
                "891fd1397e573441"
            ]
        ]
    },
    {
        "id": "891fd1397e573441",
        "type": "debug",
        "z": "d7f7b9bc5a33ce55",
        "name": "debug 186",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 1580,
        "wires": []
    },
    {
        "id": "d4b09f08fb41252b",
        "type": "mqtt out",
        "z": "d7f7b9bc5a33ce55",
        "name": "告警数据推送至TD引擎",
        "topic": "/iot/systemalarm/data/report",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "26637148eca75ac1",
        "x": 1170,
        "y": 260,
        "wires": []
    },
    {
        "id": "f7cd3f5565eff6d0",
        "type": "mqtt out",
        "z": "d7f7b9bc5a33ce55",
        "name": "告警数据推送至TD引擎",
        "topic": "/iot/systemalarm/data/report",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "26637148eca75ac1",
        "x": 1170,
        "y": 380,
        "wires": []
    },
    {
        "id": "c5a90e82de868b73",
        "type": "mqtt out",
        "z": "d7f7b9bc5a33ce55",
        "name": "",
        "topic": "/iot/pad/data/report",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "26637148eca75ac1",
        "x": 1110,
        "y": 1680,
        "wires": []
    },
    {
        "id": "4ee8d1d13e73fd8e",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "门牌状态数据推送至TD引擎",
        "func": "if(msg.payload && Array.isArray(msg.payload)){\n    let devices = msg.payload\n    let statusArr = [0,1,2,3]\n    for(let i = 0; i < devices.length; i++){\n        let status = devices[i].status\n        if (!status || status.padStatus == undefined){\n            continue\n        }\n        let padStatus = parseInt(status.padStatus)\n        if (!statusArr.includes(padStatus)){\n            continue\n        }\n        let gateways = await global.get(\"mysql_query\")(\"select * from iot_gateway where macaddr = ? limit 1\", devices[i].gateway)\n        if(gateways[0] == undefined){\n            continue;\n        }\n        let iot_devices = await global.get(\"mysql_query\")(\"select * from iot_device where gatewayID = ? and layer = ? and code = ? limit 1\", [gateways[0].id, devices[i].layer, devices[i].code])\n        if(iot_devices[0] == undefined){\n            continue;\n        }\n        \n     \n        let data = {}\n        data.ts = new Date().getTime()\n        data.position = \"/\" + iot_devices[0].spaceCode + \"/\" + iot_devices[0].areaCode + \"/\" + iot_devices[0].floorCode + \"/\" + iot_devices[0].floorAreaCode +\"/\" + iot_devices[0].name\n        data.space = iot_devices[0].spaceCode\n        data.floor_area = iot_devices[0].areaCode\n        data.floor = iot_devices[0].floorCode\n        data.area = iot_devices[0].floorAreaCode\n        data.device_code = iot_devices[0].code\n        data.device_id = iot_devices[0].id\n        data.status = padStatus\n        \n        let newMsg = {}\n        newMsg.payload = data\n        node.send(newMsg)\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 1680,
        "wires": [
            [
                "c5a90e82de868b73"
            ]
        ]
    },
    {
        "id": "987f4459dee45162",
        "type": "mqtt in",
        "z": "d7f7b9bc5a33ce55",
        "name": "",
        "topic": "/iot/status/humensensor/HGH-WC/A4/42F/M4204/#",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "26637148eca75ac1",
        "nl": false,
        "rap": false,
        "rh": "1",
        "inputs": 0,
        "x": 510,
        "y": 2880,
        "wires": [
            [
                "3ea7595d05227787"
            ]
        ]
    },
    {
        "id": "39a73df2133109d1",
        "type": "debug",
        "z": "d7f7b9bc5a33ce55",
        "name": "debug 200",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload[0].status",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 2880,
        "wires": []
    },
    {
        "id": "a7f2b4401a341943",
        "type": "mqtt out",
        "z": "d7f7b9bc5a33ce55",
        "name": "",
        "topic": "/iot/action/airconditioning/HGH-WC/A4/37F/M3707/3707出风口1",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "26637148eca75ac1",
        "x": 960,
        "y": 3100,
        "wires": []
    },
    {
        "id": "4e78fcd11e32381f",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "function 17",
        "func": "msg.payload = {\n    \"action\":\"on\",\n    \"temperature\":24,\n    \"mode\":\"3\",\n    \"fan\":45\n}\nmsg.payload = JSON.stringify(msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 3080,
        "wires": [
            [
                "a7f2b4401a341943"
            ]
        ]
    },
    {
        "id": "49dbcbad8edcac26",
        "type": "inject",
        "z": "d7f7b9bc5a33ce55",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 370,
        "y": 3080,
        "wires": [
            [
                "4e78fcd11e32381f"
            ]
        ]
    },
    {
        "id": "3f85e849380d171c",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "function 18",
        "func": "msg.payload = {\n    \"action\":\"status\"\n}\nmsg.payload = JSON.stringify(msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 3120,
        "wires": [
            [
                "a7f2b4401a341943"
            ]
        ]
    },
    {
        "id": "d0dc86f354ba83ce",
        "type": "inject",
        "z": "d7f7b9bc5a33ce55",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 370,
        "y": 3120,
        "wires": [
            [
                "3f85e849380d171c"
            ]
        ]
    },
    {
        "id": "6c6f24363f3ec584",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "function 19",
        "func": "msg.payload = {\n    \"action\":\"off\",\n}\nmsg.payload = JSON.stringify(msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 3160,
        "wires": [
            [
                "a7f2b4401a341943"
            ]
        ]
    },
    {
        "id": "04e46b0ac92075f9",
        "type": "inject",
        "z": "d7f7b9bc5a33ce55",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 370,
        "y": 3160,
        "wires": [
            [
                "6c6f24363f3ec584"
            ]
        ]
    },
    {
        "id": "fc1dcc10496bacde",
        "type": "mqtt out",
        "z": "d7f7b9bc5a33ce55",
        "name": "发布每个设备状态信息",
        "topic": "",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "26637148eca75ac1",
        "x": 900,
        "y": 280,
        "wires": []
    },
    {
        "id": "0f0e9341fe003518",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "存储数据库",
        "func": "let items = msg.payload\nif (items && Array.isArray(items) && items.length > 0){\n    for (let i = 0; i < items.length; i++){\n        let item = items[i]\n        if (!item.gateway || !item.layer){\n            continue;\n        }\n        let gateways = await global.get(\"mysql_query\")(\"select * from iot_gateway where macaddr = ? limit 1\", item.gateway)\n        if(gateways[0] == undefined){\n            continue;\n        }\n        let iot_devices = await global.get(\"mysql_query\")(\"select * from iot_device where gatewayID = ? and layer = ? and code = ? and deleteFlag = 1 limit 1\", [gateways[0].id, item.layer, item.code])\n        if(iot_devices[0] == undefined){\n            continue;\n        }\n        let status = JSON.stringify(item.status)\n        let statusUptime = parseInt(new Date().getTime()/1000)\n        await global.get(\"mysql_query\")(\"update iot_device set status = ? ,statusUptime = ? where id = ? limit 1\", [status, statusUptime, iot_devices[0].id])\n    \n        //如果状态中存在告警信息走另外一个分支\n        if(item.status){\n            let msgArr = [null, null]\n            iot_devices[0].status = item.status\n            iot_devices[0].statusUptime = statusUptime\n            let newMsg1 = {}\n            newMsg1.payload = iot_devices[0]\n            msgArr[0] = newMsg1\n            \n            if (iot_devices[0].type == \"light\" || iot_devices[0].type == \"dlight\" || iot_devices[0].type == \"airconditioning\" || iot_devices[0].type == \"aircleaner\" || iot_devices[0].type == \"airfan\" || iot_devices[0].type == \"airsensor\" || iot_devices[0].type == \"inundationsensor\"){\n                let newMsg2 = {}\n                newMsg2.topic = \"/iot/status/\" + iot_devices[0].type + \"/\" + iot_devices[0].spaceCode + \"/\" + iot_devices[0].areaCode + \"/\" + iot_devices[0].floorCode + \"/\" + iot_devices[0].floorAreaCode + \"/\" + iot_devices[0].name\n                newMsg2.payload = [item]\n                msgArr[1] = newMsg2\n            }\n\n            node.send(msgArr)\n        }\n        await global.get(\"sleep\")(100)\n    }\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 260,
        "wires": [
            [
                "c303f3a09799b7f4"
            ],
            [
                "fc1dcc10496bacde"
            ]
        ]
    },
    {
        "id": "036bab8d199f77bc",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "存储数据库",
        "func": "let devices = msg.payload.devices\nlet params = msg.payload.params\nlet topic = msg.payload.topic\nlet gateway = msg.payload.gateway\nlet layer = msg.payload.layer\nif (gateway && layer && topic && params && devices && Array.isArray(devices)){\n    for (let i = 0; i < devices.length; i++) {\n        let item = devices[i]\n        let gateways = await global.get(\"mysql_query\")(\"select * from iot_gateway where macaddr = ? limit 1\", gateway)\n        if (gateways[0] == undefined) {\n            continue;\n        }\n        let iot_devices = await global.get(\"mysql_query\")(\"select * from iot_device where gatewayID = ? and layer = ? and code = ? limit 1\", [gateways[0].id, layer, item.code])\n        if (iot_devices[0] == undefined) {\n            continue;\n        }\n        let g = gateways[0]\n        let d = iot_devices[0]\n\n        let title = \"\"\n        if(msg.payload.title){\n            title = msg.payload.title\n        }\n        let tag = \"\"\n        if (msg.payload.tag) {\n            title = msg.payload.tag\n        }\n        let actionName = \"\"\n        if (params.action == \"on\"){\n            actionName = \"开启\"\n        }else if(params.action == \"off\"){\n            actionName = \"关闭\"\n        }\n        let level = \"NORMAL\"\n        let sourceFrom = \"\"\n        if(params.sourceFrom){\n            sourceFrom = params.sourceFrom\n        }\n        let sourceTopic = topic\n        let sourceContent = JSON.stringify(params)\n        let spaceCode = d.spaceCode\n        let spaceName = d.spaceName\n        let areaCode = d.areaCode\n        let areaName = d.areaName\n        let floorCode = d.floorCode\n        let floorName = d.floorName\n        let floorAreaType = d.floorAreaType\n        let floorAreaCode = d.floorAreaCode\n        let floorAreaName = d.floorAreaName\n        let gatewayID = g.id\n        let gatewayName = g.name\n        let deviceCode = d.code\n        let deviceName = d.name\n        let orgID = \"\"\n        let orgName = \"\"\n        let departmentID = \"\"\n        let departmentName = \"\"\n        let userID = \"\"\n        let userName = \"\"\n        let createtime = parseInt(new Date().getTime() / 1000)\n        let values = [title, tag, actionName, level, sourceFrom, sourceTopic, sourceContent, spaceCode, spaceName, floorAreaCode, floorAreaName, floorCode, floorName, floorAreaType, areaCode, areaName, gatewayID, gatewayName, deviceCode, deviceName, orgID, orgName, departmentID, departmentName, userID, userName, createtime]\n        await global.get(\"mysql_query\")('insert into iot_log(title, tag, actionName, level, sourceFrom, sourceTopic, sourceContent, spaceCode, spaceName, floorAreaCode, floorAreaName, floorCode, floorName, floorAreaType, areaCode, areaName, gatewayID, gatewayName, deviceCode, deviceName, orgID, orgName, departmentID, departmentName, userID, userName, createtime) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)', values)\n    }\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 340,
        "wires": [
            [
                "d16425ec74b9e9b2"
            ]
        ]
    },
    {
        "id": "4845b17c23ca44e6",
        "type": "inject",
        "z": "d7f7b9bc5a33ce55",
        "name": "定时检测告警提醒",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 450,
        "y": 460,
        "wires": [
            [
                "3d7437601efd1b88"
            ]
        ]
    },
    {
        "id": "3d7437601efd1b88",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "告警提醒",
        "func": "let spaceId = flow.get(\"spaceId\")\nif (!spaceId) {\n    return\n}\nlet alarm_type_users = flow.get(\"alarm_type_users\")\nlet system_alarm_sources = await global.get(\"mysql_query\")(\"select * from system_alarm_source where spaceId = ? and `status` = 0 and `isNotice` = 0 limit 1000\", [spaceId])\nfor (let i = 0; i < system_alarm_sources.length; i++){\n    let d = system_alarm_sources[i]\n    let type = d.type\n    let notice_users = []\n    if (alarm_type_users[type]) {\n        notice_users = alarm_type_users[type]\n    }\n    for (let i = 0; i < notice_users.length; i++) {\n        let userId = notice_users[i].userId\n        let userName = notice_users[i].userName\n        if (!userId) {\n            continue\n        }\n        let alarmSourceId = d.id\n        let typeName = d.typeName\n        let deviceID = d.deviceID\n        let deviceName = d.deviceName\n        let deviceAddress = d.deviceAddress\n        let deviceFullName = d.deviceFullName\n        let alarmCode = d.alarmCode\n        let alarmMsg = d.alarmMsg\n        let baseUnit = d.baseUnit\n        let baseValue = d.baseValue\n        let realValue = d.realValue\n        let createTime = parseInt(new Date().getTime() / 1000)\n\n        let values = [spaceId, alarmSourceId, userId, userName, type, typeName, deviceID, deviceName, deviceAddress, deviceFullName, alarmCode, alarmMsg, baseUnit, baseValue, realValue, createTime]\n        await global.get(\"mysql_query\")(\"insert into system_alarm_notice (spaceId, alarmSourceId, userId, userName, type, typeName, deviceID, deviceName, deviceAddress, deviceFullName, alarmCode, alarmMsg, baseUnit, baseValue, realValue, createTime) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\", values)\n\n        // let system_alarm_notices = await global.get(\"mysql_query\")(\"select * from system_alarm_notice where spaceId = ? and alarmSourceId = ? and userId = ? limit 1\", [spaceId, alarmSourceId, userId])\n        // if (system_alarm_notices[0] == undefined) {\n        //     let values = [spaceId, alarmSourceId, userId, userName, type, typeName, deviceID, deviceName, deviceAddress, deviceFullName, alarmCode, alarmMsg, baseUnit, baseValue, realValue, createTime]\n        //     await global.get(\"mysql_query\")(\"insert into system_alarm_notice (spaceId, alarmSourceId, userId, userName, type, typeName, deviceID, deviceName, deviceAddress, deviceFullName, alarmCode, alarmMsg, baseUnit, baseValue, realValue, createTime) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\", values)\n        // }\n    }\n    await global.get(\"mysql_query\")(\"update system_alarm_source set isNotice = 1 where id = ? limit 1\", [d.id])\n    await global.get(\"sleep\")(500)\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 680,
        "y": 460,
        "wires": [
            [
                "4118c65129544cfe"
            ]
        ]
    },
    {
        "id": "4118c65129544cfe",
        "type": "debug",
        "z": "d7f7b9bc5a33ce55",
        "name": "debug 202",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 460,
        "wires": []
    },
    {
        "id": "195c74024e4cc37f",
        "type": "inject",
        "z": "d7f7b9bc5a33ce55",
        "name": "清理未处理告警源数据",
        "props": [],
        "repeat": "",
        "crontab": "00 20 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 530,
        "y": 1740,
        "wires": [
            [
                "6c211d9b63f6d496"
            ]
        ]
    },
    {
        "id": "6c211d9b63f6d496",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "清理数据",
        "func": "let spaceId = flow.get(\"spaceId\")\nawait global.get(\"mysql_query\")(\"delete from system_alarm_source where spaceId = ? and status = 0\", [spaceId])\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 760,
        "y": 1740,
        "wires": [
            [
                "aa97af93c55543c4"
            ]
        ]
    },
    {
        "id": "aa97af93c55543c4",
        "type": "debug",
        "z": "d7f7b9bc5a33ce55",
        "name": "debug 215",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 1740,
        "wires": []
    },
    {
        "id": "b54a76e09b404559",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "存储数据库",
        "func": "let items = msg.payload\nif (items && Array.isArray(items) && items.length > 0){\n    for (let i = 0; i < items.length; i++){\n        let item = items[i]\n        if (!item.gateway || !item.layer){\n            continue;\n        }\n        let gateways = await global.get(\"mysql_query\")(\"select * from iot_gateway where macaddr = ? limit 1\", item.gateway)\n        if(gateways[0] == undefined){\n            continue;\n        }\n        let iot_devices = await global.get(\"mysql_query\")(\"select * from iot_device where gatewayID = ? and layer = ? and code = ? limit 1\", [gateways[0].id, item.layer, item.code])\n        if(iot_devices[0] == undefined){\n            continue;\n        }\n\n        if(item.padStatus != undefined){\n            item.status.padStatus = item.padStatus\n        }\n\n        let status = JSON.stringify(item.status)\n        let statusUptime = parseInt(new Date().getTime()/1000)\n        await global.get(\"mysql_query\")(\"update iot_device set status = ? ,statusUptime = ? where id = ? limit 1\", [status, statusUptime, iot_devices[0].id])\n    }\n}\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 770,
        "y": 1640,
        "wires": [
            [
                "5f6b13c4a5e7aa0f"
            ]
        ]
    },
    {
        "id": "5f6b13c4a5e7aa0f",
        "type": "debug",
        "z": "d7f7b9bc5a33ce55",
        "name": "debug 216",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 1640,
        "wires": []
    },
    {
        "id": "31aa1166b2e3470b",
        "type": "inject",
        "z": "d7f7b9bc5a33ce55",
        "name": "定时检测设备离线告警",
        "props": [],
        "repeat": "600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 450,
        "y": 500,
        "wires": [
            [
                "317406271e0b44cf"
            ]
        ]
    },
    {
        "id": "317406271e0b44cf",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "离线设备告警检测",
        "func": "let spaceCode = flow.get(\"spaceCode\")\nlet spaceId = flow.get(\"spaceId\")\nif (!spaceId || !spaceCode) {\n    return\n}\n//排除分区\nlet invalidFloorAreas = []\n//排除楼层\nlet invalidFloors = [\"26F\", \"52F\", \"53F\", \"54F\"]\n\nlet checkTime = parseInt(new Date().getTime() / 1000) - 600\nlet checkTimePower = parseInt(new Date().getTime() / 1000) - 1800\nlet iot_devices = await global.get(\"mysql_query\")(\"select * from iot_device where spaceCode = ? and deleteFlag = 1 and type != 'blind' and (`statusUptime` <  ? or `statusUptime` = '')\", [spaceCode, checkTime])\n\n// node.error(iot_devices)\n\nfor (let i = 0; i < iot_devices.length; i++){\n    let device = iot_devices[i]\n    if (invalidFloorAreas.includes(device.areaCode) || invalidFloors.includes(device.floorCode)){\n        continue\n    }\n\n    //电量采集单独判断, 30分钟无数据判定离线\n    if(device.statusUptime && device.statusUptime >= checkTimePower){\n        continue\n    }\n\n    let dStatus = flow.get(\"jsJson\")(device.status)\n    if (device.type = \"aicamerasensor\" && dStatus && dStatus.densitycount == undefined){\n        continue\n    }\n\n    let type = \"\" //设备类型报警\n    let typeName = \"\"\n    let deviceID = device.id\n    let deviceName = device.name\n    let deviceAddress = \"\"\n    let deviceFullName = \"/\" + device.spaceCode + \"/\" + device.areaCode + \"/\" + device.floorCode + \"/\" + device.floorAreaCode + \"/\" + device.name\n    let alarmCode = \"\"\n    let alarmMsg = \"\"\n    let baseUnit = \"\"\n    let baseValue = \"\"\n    let realValue = \"\"\n    let createTime = parseInt(new Date().getTime() / 1000)\n    let updateTime = createTime\n\n    type = \"1\" //设备类型报警\n    typeName = \"设备告警\"\n    deviceAddress = \"online\"\n    alarmCode = \"\"\n    alarmMsg = \"设备离线\"\n\n    //记录告警日志\n    let values = [spaceId, type, typeName, deviceID, deviceName, deviceAddress, deviceFullName, alarmCode, alarmMsg, baseUnit, baseValue, realValue, createTime]\n    await global.get(\"mysql_query\")(\"insert into system_alarm (spaceId, type, typeName, deviceID, deviceName, deviceAddress, deviceFullName, alarmCode, alarmMsg, baseUnit, baseValue, realValue, createTime) values (?,?,?,?,?,?,?,?,?,?,?,?,?)\", values)\n\n    //推送日志信息到TD\n    let data = {}\n    data.ts = new Date().getTime()\n    data.position = deviceFullName\n    data.space = device.spaceCode\n    data.floor_area = device.areaCode\n    data.floor = device.floorCode\n    data.area = device.floorAreaCode\n    data.device_code = device.code\n    data.device_id = device.id\n    data.type = type\n    data.type_name = typeName\n    data.device_address = deviceAddress\n    data.alarm_code = alarmCode\n    data.alarm_msg = alarmMsg\n    data.base_unit = baseUnit\n    data.base_value = baseValue\n    data.real_value = realValue\n    let newMsg = {}\n    newMsg.payload = data\n    node.send(newMsg)\n\n    //记录告警数据源\n    let system_alarm_sources = await global.get(\"mysql_query\")(\"select * from system_alarm_source where spaceId = ? and deviceID = ? and `status` = 0 and deviceAddress = ? limit 1\", [spaceId, device.id, deviceAddress])\n    if (system_alarm_sources[0] == undefined) {\n        let values = [spaceId, type, typeName, deviceID, deviceName, deviceAddress, deviceFullName, alarmCode, alarmMsg, baseUnit, baseValue, realValue, createTime, updateTime]\n        await global.get(\"mysql_query\")(\"insert into system_alarm_source (spaceId, type, typeName, deviceID, deviceName, deviceAddress, deviceFullName, alarmCode, alarmMsg, baseUnit, baseValue, realValue, createTime, updateTime) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?)\", values)\n    } else {\n        await global.get(\"mysql_query\")(\"update system_alarm_source set updateTime = ? where id = ? limit 1\", [updateTime, system_alarm_sources[0].id])\n    }   \n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 710,
        "y": 500,
        "wires": [
            [
                "b5fedb0d35495e5a"
            ]
        ]
    },
    {
        "id": "b5fedb0d35495e5a",
        "type": "mqtt out",
        "z": "d7f7b9bc5a33ce55",
        "name": "告警数据推送至TD引擎",
        "topic": "/iot/systemalarm/data/report",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "26637148eca75ac1",
        "x": 1030,
        "y": 500,
        "wires": []
    },
    {
        "id": "ade82ab7b5e43a0b",
        "type": "mqtt in",
        "z": "d7f7b9bc5a33ce55",
        "name": "边缘网关心跳数据接收",
        "topic": "/iot/status/gateway/heartbeat",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "26637148eca75ac1",
        "nl": false,
        "rap": false,
        "rh": "1",
        "inputs": 0,
        "x": 500,
        "y": 1980,
        "wires": [
            [
                "a3400d99dee6dfd8"
            ]
        ]
    },
    {
        "id": "a3400d99dee6dfd8",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "存储数据库",
        "func": "let data = msg.payload\nif (data && data.macaddr){\n    let macaddr = data.macaddr\n    let statusUptime = parseInt(new Date().getTime() / 1000)\n    await global.get(\"mysql_query\")(\"update iot_gateway set heartbeatTime = ? where macaddr = ? limit 1\", [statusUptime, macaddr])\n}\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 770,
        "y": 1980,
        "wires": [
            [
                "fd65755b97675cfa"
            ]
        ]
    },
    {
        "id": "fd65755b97675cfa",
        "type": "debug",
        "z": "d7f7b9bc5a33ce55",
        "name": "debug 218",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 1980,
        "wires": []
    },
    {
        "id": "ed10f44187da4c48",
        "type": "inject",
        "z": "d7f7b9bc5a33ce55",
        "name": "定时处理已通知告警到日志记录",
        "props": [],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 500,
        "y": 1780,
        "wires": [
            [
                "2a63821740d3c877"
            ]
        ]
    },
    {
        "id": "2a63821740d3c877",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "清理数据",
        "func": "let spaceId = flow.get(\"spaceId\")\nlet system_alarm_notices = await global.get(\"mysql_query\")(\"select * from system_alarm_notice where spaceId = ? and (isNotice = 2 or isNotice = 3) limit 10000\", [spaceId])\nfor (let i = 0; i < system_alarm_notices.length; i++){\n    let d = system_alarm_notices[i]\n    let userId = d.userId\n    let userName = d.userName\n    let alarmSourceId = d.id\n    let type = d.type\n    let typeName = d.typeName\n    let deviceID = d.deviceID\n    let deviceName = d.deviceName\n    let deviceAddress = d.deviceAddress\n    let deviceFullName = d.deviceFullName\n    let alarmCode = d.alarmCode\n    let alarmMsg = d.alarmMsg\n    let baseUnit = d.baseUnit\n    let baseValue = d.baseValue\n    let realValue = d.realValue\n    let createTime = d.createTime\n    let isNotice = d.isNotice\n    let noticeMsg = d.noticeMsg\n\n    let values = [spaceId, alarmSourceId, userId, userName, type, typeName, deviceID, deviceName, deviceAddress, deviceFullName, alarmCode, alarmMsg, baseUnit, baseValue, realValue, createTime, isNotice, noticeMsg]\n    await global.get(\"mysql_query\")(\"insert into system_alarm_notice_log (spaceId, alarmSourceId, userId, userName, type, typeName, deviceID, deviceName, deviceAddress, deviceFullName, alarmCode, alarmMsg, baseUnit, baseValue, realValue, createTime, isNotice, noticeMsg) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\", values)\n\n    await global.get(\"mysql_query\")(\"delete from system_alarm_notice where id = ? limit 1\", [d.id])\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 760,
        "y": 1780,
        "wires": [
            [
                "8af216bdf094c68f"
            ]
        ]
    },
    {
        "id": "8af216bdf094c68f",
        "type": "debug",
        "z": "d7f7b9bc5a33ce55",
        "name": "debug 220",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 1780,
        "wires": []
    },
    {
        "id": "10b906637e2cbd3a",
        "type": "inject",
        "z": "d7f7b9bc5a33ce55",
        "name": "定时处理通行日志记录",
        "props": [],
        "repeat": "",
        "crontab": "00 02 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 470,
        "y": 1820,
        "wires": [
            [
                "eeb0df47e0fc5f46"
            ]
        ]
    },
    {
        "id": "eeb0df47e0fc5f46",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "清理数据",
        "func": "let spaceId = flow.get(\"spaceId\")\nlet checkTime = moment(moment().format(\"YYYY-MM-DD\")).unix()\nlet door_pass_logs = await global.get(\"mysql_query\")(\"select * from door_pass_log where spaceId = ? and passTime < ? order by passTime ASC limit 50000\", [spaceId, checkTime])\nfor (let i = 0; i < door_pass_logs.length; i++){\n    let d = door_pass_logs[i]\n    let values = [d.spaceId, d.platform, d.personName, d.personId, d.personType, d.personPhone, d.personEmail, d.personEmpNo, d.passDirection, d.serviceId, d.serviceName, d.doorId, d.doorName, d.passType, d.faceUrl, d.cardNum, d.passTime, d.passTimeStr]\n    await global.get(\"mysql_query\")('insert into door_pass_final_log (spaceId, platform, personName, personId, personType, personPhone, personEmail, personEmpNo, passDirection, serviceId, serviceName, doorId, doorName, passType, faceUrl, cardNum, passTime, passTimeStr) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)', values)\n\n    await global.get(\"mysql_query\")(\"delete from door_pass_log where id = ? limit 1\", [d.id])\n}\nmsg.checkTime = checkTime\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 760,
        "y": 1840,
        "wires": [
            [
                "06c8980c020f5795"
            ]
        ]
    },
    {
        "id": "06c8980c020f5795",
        "type": "debug",
        "z": "d7f7b9bc5a33ce55",
        "name": "debug 223",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 1840,
        "wires": []
    },
    {
        "id": "679957ec3e4bb2f5",
        "type": "inject",
        "z": "d7f7b9bc5a33ce55",
        "name": "定时处理通行日志记录",
        "props": [],
        "repeat": "",
        "crontab": "30 02 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 470,
        "y": 1860,
        "wires": [
            [
                "eeb0df47e0fc5f46"
            ]
        ]
    },
    {
        "id": "87315a52b84b2280",
        "type": "mqtt in",
        "z": "d7f7b9bc5a33ce55",
        "name": "",
        "topic": "/iot/status/areaairsensor/HGH-WC/A3/27F/M2708",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "26637148eca75ac1",
        "nl": false,
        "rap": false,
        "rh": "1",
        "inputs": 0,
        "x": 500,
        "y": 2920,
        "wires": [
            []
        ]
    },
    {
        "id": "1d08cef0e7125615",
        "type": "debug",
        "z": "d7f7b9bc5a33ce55",
        "name": "debug 246",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload[0].status",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 2920,
        "wires": []
    },
    {
        "id": "670c3f814a82c159",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "function 20",
        "func": "let data = JSON.stringify(msg.payload[0].status)\nlet tt = moment().format(\"YYYY-MM-DD HH:mm:ss\")\nfs.appendFileSync(\"/home/B\", tt+\" ===> \"+data+\"\\n\")\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fs",
                "module": "fs"
            },
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 790,
        "y": 2880,
        "wires": [
            [
                "39a73df2133109d1"
            ]
        ]
    },
    {
        "id": "94c47ca0dc7a0ed0",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "function 21",
        "func": "let data = JSON.stringify(msg.payload[0].status)\nlet tt = moment().format(\"YYYY-MM-DD HH:mm:ss\")\nfs.appendFileSync(\"/home/M2708\", tt+\" ===> \"+data+\"\\n\")\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fs",
                "module": "fs"
            },
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 790,
        "y": 2920,
        "wires": [
            [
                "1d08cef0e7125615"
            ]
        ]
    },
    {
        "id": "3ea7595d05227787",
        "type": "debug",
        "z": "d7f7b9bc5a33ce55",
        "name": "debug 247",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 2840,
        "wires": []
    },
    {
        "id": "6c4416196772e805",
        "type": "mqtt out",
        "z": "d7f7b9bc5a33ce55",
        "name": "推送到监控终端",
        "topic": "/emergent/status/security/message",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "26637148eca75ac1",
        "x": 1120,
        "y": 1120,
        "wires": []
    },
    {
        "id": "f70e098dc0013d7f",
        "type": "inject",
        "z": "d7f7b9bc5a33ce55",
        "name": "获取当日策略日志数据到TD临时表",
        "props": [],
        "repeat": "600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 500,
        "y": 2080,
        "wires": [
            [
                "ea9eb68c82d0f4c0"
            ]
        ]
    },
    {
        "id": "ea9eb68c82d0f4c0",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "处理数据",
        "func": "let checkTime = moment(moment().format(\"YYYY-MM-DD\")).unix()\nlet spaceCode = flow.get(\"spaceCode\")\nlet iot_policy_logs = await global.get(\"mysql_query\")(\"select * from iot_policy_log where spaceCode = ? and  createTime >= ?\", [spaceCode, checkTime])\nfor (let i = 0; i < iot_policy_logs.length; i++) {\n    let d = iot_policy_logs[i]\n    let sourceType = \"policy\"\n    let sourceName = d.policyName\n    let userId = \"\"\n    let userName = \"\"\n    let userEmpNo = \"\"\n    let spaceCode = d.spaceCode\n    let floorAreaCode = d.floorAreaCode\n    let floorCode = d.floorCode\n    let areaCode = d.areaCode\n    let deviceType = d.deviceType\n    let actionTopic = d.actionTopic\n    let actionData = d.actionData\n    let controlTime = d.createTime\n    let log_id = \"policy_\"+d.id\n\n    let values = [sourceType, sourceName, userId, userName, userEmpNo, spaceCode, floorAreaCode, floorCode, areaCode, deviceType, actionTopic, actionData, controlTime, log_id]\n    let iot_control_log_temps = await global.get(\"mysql_query\")(\"select * from iot_control_log_temp where log_id = ? limit 1\", [log_id])\n    if (iot_control_log_temps[0] == undefined){\n        await global.get(\"mysql_query\")(\"insert into iot_control_log_temp (sourceType, sourceName, userId, userName, userEmpNo, spaceCode, floorAreaCode, floorCode, areaCode, deviceType, actionTopic, actionData, controlTime, log_id) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?)\", values)\n    }\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 780,
        "y": 2060,
        "wires": [
            [
                "b925f01645c546ca"
            ]
        ]
    },
    {
        "id": "b925f01645c546ca",
        "type": "debug",
        "z": "d7f7b9bc5a33ce55",
        "name": "debug 256",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 2060,
        "wires": []
    },
    {
        "id": "2004f29a8c3537db",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "处理数据",
        "func": "let checkTime = moment(moment().format(\"YYYY-MM-DD\")).unix()\nlet spaceCode = flow.get(\"spaceCode\")\nlet iot_control_logs = await global.get(\"mysql_query\")(\"select * from iot_control_log where spaceCode = ? and  createTime >= ?\", [spaceCode, checkTime])\nfor (let i = 0; i < iot_control_logs.length; i++) {\n    let d = iot_control_logs[i]\n    let sourceType = d.sourceType\n    let sourceName = d.sourceName\n    let userId = d.userId\n    let userName = d.userName\n    let userEmpNo = d.userEmpNo ? d.userEmpNo : \"\"\n    let spaceCode = d.spaceCode\n    let floorAreaCode = d.floorAreaCode\n    let floorCode = d.floorCode\n    let areaCode = d.areaCode\n    let deviceType = d.deviceType\n    let actionTopic = d.actionTopic\n    let actionData = d.actionData\n    let controlTime = d.createTime\n    let log_id = \"control_\"+d.id\n\n    let values = [sourceType, sourceName, userId, userName, userEmpNo, spaceCode, floorAreaCode, floorCode, areaCode, deviceType, actionTopic, actionData, controlTime, log_id]\n    let iot_control_log_temps = await global.get(\"mysql_query\")(\"select * from iot_control_log_temp where log_id = ? limit 1\", [log_id])\n    if (iot_control_log_temps[0] == undefined){\n        await global.get(\"mysql_query\")(\"insert into iot_control_log_temp (sourceType, sourceName, userId, userName, userEmpNo, spaceCode, floorAreaCode, floorCode, areaCode, deviceType, actionTopic, actionData, controlTime, log_id) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?)\", values)\n    }\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 780,
        "y": 2140,
        "wires": [
            [
                "e41f8b0e6abfaf6a"
            ]
        ]
    },
    {
        "id": "e41f8b0e6abfaf6a",
        "type": "debug",
        "z": "d7f7b9bc5a33ce55",
        "name": "debug 257",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 2140,
        "wires": []
    },
    {
        "id": "95ca5a6efeedb16d",
        "type": "inject",
        "z": "d7f7b9bc5a33ce55",
        "name": "定时推送当日日志数据到TD",
        "props": [],
        "repeat": "600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 520,
        "y": 2200,
        "wires": [
            [
                "0b4d25b171fee1ef"
            ]
        ]
    },
    {
        "id": "0b4d25b171fee1ef",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "推送数据到TD",
        "func": "let spaceCode = flow.get(\"spaceCode\")\nlet iot_control_log_temps = await global.get(\"mysql_query\")(\"select * from iot_control_log_temp where spaceCode = ? and flag = 0 limit 5000\", [spaceCode])\nfor (let i = 0; i < iot_control_log_temps.length; i++) {\n    let d = iot_control_log_temps[i]\n    let sourceType = d.sourceType\n    let sourceName = d.sourceName\n    let userId = d.userId\n    let userName = d.userName\n    let userEmpNo = d.userEmpNo ? d.userEmpNo : \"\"\n    let deviceType = d.deviceType\n    let actionTopic = d.actionTopic\n    let actionData = d.actionData\n    let controlTime = d.controlTime\n\n    let data = {}\n    data.ts = parseInt(controlTime) * 1000 + parseInt(Math.random() * (999 - 100) + 100)\n    data.space = d.spaceCode\n    data.floor_area = d.floorAreaCode\n    data.floor = d.floorCode\n    data.area = d.areaCode\n    data.source_type = sourceType\n    data.source_name = sourceName\n    data.user_id = userId\n    data.user_emp_no = userEmpNo\n    data.user_name = userName\n    data.device_type = deviceType\n    data.action_topic = actionTopic\n    data.action_data = actionData\n\n    let newMsg = {}\n    newMsg.payload = data\n    node.send(newMsg)\n\n    await global.get(\"mysql_query\")(\"update iot_control_log_temp set flag = 1 where id = ? limit 1\", [d.id])\n    await global.get(\"sleep\")(100)\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 800,
        "y": 2200,
        "wires": [
            [
                "714f0b4bb286d38b"
            ]
        ]
    },
    {
        "id": "714f0b4bb286d38b",
        "type": "mqtt out",
        "z": "d7f7b9bc5a33ce55",
        "name": "",
        "topic": "/iot/iotcontrollog/data/report",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "26637148eca75ac1",
        "x": 1080,
        "y": 2200,
        "wires": []
    },
    {
        "id": "26f299840d6fa1d8",
        "type": "inject",
        "z": "d7f7b9bc5a33ce55",
        "name": "23:59获取当日策略日志数据到TD临时表",
        "props": [],
        "repeat": "",
        "crontab": "59 23 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 480,
        "y": 2040,
        "wires": [
            [
                "ea9eb68c82d0f4c0"
            ]
        ]
    },
    {
        "id": "01fb0f19c87f1e8d",
        "type": "inject",
        "z": "d7f7b9bc5a33ce55",
        "name": "23:59获取当日控制日志数据到TD临时表",
        "props": [],
        "repeat": "",
        "crontab": "59 23 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 480,
        "y": 2120,
        "wires": [
            [
                "2004f29a8c3537db"
            ]
        ]
    },
    {
        "id": "dcf1ded7031dd547",
        "type": "inject",
        "z": "d7f7b9bc5a33ce55",
        "name": "获取当日控制日志数据到TD临时表",
        "props": [],
        "repeat": "600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 500,
        "y": 2160,
        "wires": [
            [
                "2004f29a8c3537db"
            ]
        ]
    },
    {
        "id": "dae8f9e0fdcde1e8",
        "type": "inject",
        "z": "d7f7b9bc5a33ce55",
        "name": "00:10清理已推送数据",
        "props": [],
        "repeat": "",
        "crontab": "10 00 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 540,
        "y": 2280,
        "wires": [
            [
                "9fb6fbb1febfd594"
            ]
        ]
    },
    {
        "id": "9fb6fbb1febfd594",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "清理数据",
        "func": "let spaceCode = flow.get(\"spaceCode\")\nlet checkTime = moment(moment().format(\"YYYY-MM-DD\")).unix()\nawait global.get(\"mysql_query\")(\"delete from iot_control_log_temp where spaceCode = ? and flag = 1 and controlTime < ?\", [spaceCode, checkTime])\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 780,
        "y": 2280,
        "wires": [
            [
                "ecec307e23c965a0"
            ]
        ]
    },
    {
        "id": "ecec307e23c965a0",
        "type": "debug",
        "z": "d7f7b9bc5a33ce55",
        "name": "debug 259",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 2280,
        "wires": []
    },
    {
        "id": "622122344b64df50",
        "type": "inject",
        "z": "d7f7b9bc5a33ce55",
        "name": "23:59推送当日日志数据到TD",
        "props": [],
        "repeat": "",
        "crontab": "59 23 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 510,
        "y": 2240,
        "wires": [
            [
                "0b4d25b171fee1ef"
            ]
        ]
    },
    {
        "id": "f80c5ab11cd11ce8",
        "type": "inject",
        "z": "d7f7b9bc5a33ce55",
        "name": "关42F灯",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 500,
        "y": 3380,
        "wires": [
            [
                "af525a7791635807"
            ]
        ]
    },
    {
        "id": "af525a7791635807",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "function 22",
        "func": "msg.payload = {\n    \"action\":\"stop\"\n}\nmsg.payload = JSON.stringify(msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 3380,
        "wires": [
            [
                "64e41a7293b859b2"
            ]
        ]
    },
    {
        "id": "e6d3ee08b260a541",
        "type": "mqtt out",
        "z": "d7f7b9bc5a33ce55",
        "name": "",
        "topic": "/iot/action/user/add",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "26637148eca75ac1",
        "x": 970,
        "y": 3700,
        "wires": []
    },
    {
        "id": "9974574670fc832d",
        "type": "inject",
        "z": "d7f7b9bc5a33ce55",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 490,
        "y": 3700,
        "wires": [
            [
                "cae3f19adbc5d91f"
            ]
        ]
    },
    {
        "id": "cae3f19adbc5d91f",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "function 23",
        "func": "msg.payload = {\n    \"userId\":\"393144000026\"\n}\nmsg.payload = JSON.stringify(msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 3700,
        "wires": [
            [
                "e6d3ee08b260a541"
            ]
        ]
    },
    {
        "id": "495a6af97f80d6b7",
        "type": "mqtt out",
        "z": "d7f7b9bc5a33ce55",
        "name": "",
        "topic": "/iot/action/user/face/push",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "26637148eca75ac1",
        "x": 990,
        "y": 3740,
        "wires": []
    },
    {
        "id": "945938f8301d5cc2",
        "type": "inject",
        "z": "d7f7b9bc5a33ce55",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 490,
        "y": 3740,
        "wires": [
            [
                "dae695f48773444b"
            ]
        ]
    },
    {
        "id": "dae695f48773444b",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "function 24",
        "func": "msg.payload = {\n    \"userId\":\"393144000026\"\n}\nmsg.payload = JSON.stringify(msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 3740,
        "wires": [
            [
                "495a6af97f80d6b7"
            ]
        ]
    },
    {
        "id": "d5a2bc36b8a6d005",
        "type": "mqtt out",
        "z": "d7f7b9bc5a33ce55",
        "name": "",
        "topic": "/iot/action/user/remove",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "26637148eca75ac1",
        "x": 980,
        "y": 3960,
        "wires": []
    },
    {
        "id": "af238aea98968202",
        "type": "inject",
        "z": "d7f7b9bc5a33ce55",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 490,
        "y": 3960,
        "wires": [
            [
                "43dd9bee29d93b4e"
            ]
        ]
    },
    {
        "id": "43dd9bee29d93b4e",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "function 25",
        "func": "msg.payload = {\n    \"userId\":\"413146133115\"\n}\nmsg.payload = JSON.stringify(msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 3960,
        "wires": [
            [
                "d5a2bc36b8a6d005"
            ]
        ]
    },
    {
        "id": "a6cd0d9dd1a3746d",
        "type": "mqtt out",
        "z": "d7f7b9bc5a33ce55",
        "name": "",
        "topic": "/iot/action/user/modify",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "26637148eca75ac1",
        "x": 980,
        "y": 3800,
        "wires": []
    },
    {
        "id": "dd326c9a795b4225",
        "type": "inject",
        "z": "d7f7b9bc5a33ce55",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 490,
        "y": 3800,
        "wires": [
            [
                "3afb58cacc2b1255"
            ]
        ]
    },
    {
        "id": "3afb58cacc2b1255",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "function 26",
        "func": "msg.payload = {\n    \"userId\":\"1158397137647\"\n}\nmsg.payload = JSON.stringify(msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 3800,
        "wires": [
            [
                "a6cd0d9dd1a3746d"
            ]
        ]
    },
    {
        "id": "6eb643a3a142b829",
        "type": "inject",
        "z": "d7f7b9bc5a33ce55",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 490,
        "y": 3840,
        "wires": [
            [
                "d15ebe9c57fccd66"
            ]
        ]
    },
    {
        "id": "d15ebe9c57fccd66",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "function 27",
        "func": "msg.payload = {\n    \"userId\":\"546249752579\"\n}\nmsg.payload = JSON.stringify(msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 3840,
        "wires": [
            [
                "a6cd0d9dd1a3746d"
            ]
        ]
    },
    {
        "id": "7c7788611531f73e",
        "type": "inject",
        "z": "d7f7b9bc5a33ce55",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 490,
        "y": 3880,
        "wires": [
            [
                "577d56e702b0c91c"
            ]
        ]
    },
    {
        "id": "577d56e702b0c91c",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "function 28",
        "func": "msg.payload = {\n    \"userId\":\"489571435066\"\n}\nmsg.payload = JSON.stringify(msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 3880,
        "wires": [
            [
                "a6cd0d9dd1a3746d"
            ]
        ]
    },
    {
        "id": "1d717f9805058996",
        "type": "debug",
        "z": "d7f7b9bc5a33ce55",
        "name": "debug 293",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 1160,
        "wires": []
    },
    {
        "id": "8c2e60643af3de17",
        "type": "mqtt out",
        "z": "d7f7b9bc5a33ce55",
        "name": "",
        "topic": "/iot/action/user/card/push",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "26637148eca75ac1",
        "x": 990,
        "y": 4020,
        "wires": []
    },
    {
        "id": "0791da8634fb9b09",
        "type": "inject",
        "z": "d7f7b9bc5a33ce55",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 490,
        "y": 4020,
        "wires": [
            [
                "2fda9e82b25c4f25"
            ]
        ]
    },
    {
        "id": "2fda9e82b25c4f25",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "function 29",
        "func": "msg.payload = {\n    \"userId\":\"887703359738\"\n}\nmsg.payload = JSON.stringify(msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 4020,
        "wires": [
            [
                "8c2e60643af3de17"
            ]
        ]
    },
    {
        "id": "c13b1ee3ce41b649",
        "type": "mqtt out",
        "z": "d7f7b9bc5a33ce55",
        "name": "",
        "topic": "/iot/powersensor_loop/data/report",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "26637148eca75ac1",
        "x": 1160,
        "y": 700,
        "wires": []
    },
    {
        "id": "0b622561a467aac8",
        "type": "inject",
        "z": "d7f7b9bc5a33ce55",
        "name": "定时获取电箱回路属性映射关系",
        "props": [],
        "repeat": "600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 400,
        "y": 660,
        "wires": [
            [
                "8f9a7cda52ea0d59"
            ]
        ]
    },
    {
        "id": "8f9a7cda52ea0d59",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "缓存关系表",
        "func": "let spaceCode = flow.get(\"spaceCode\")\nlet iot_power_loop_types = await global.get(\"mysql_query\")(\"select * from iot_power_loop_type where spaceCode = ?\", [spaceCode])\nlet iot_power_loop_type_obj = {}\nfor (let i = 0; i < iot_power_loop_types.length; i++){\n    let d = iot_power_loop_types[i]\n    if(iot_power_loop_type_obj[d.deviceId] == undefined){\n        iot_power_loop_type_obj[d.deviceId] = {}\n    }\n    for (let i = 1; i <= 27; i++) {\n        if(d[\"loop\"+i] == undefined){\n            continue\n        }\n        iot_power_loop_type_obj[d.deviceId][\"loop\"+i] = d[\"loop\"+i]\n    }\n}\nflow.set(\"iot_power_loop_type_obj\", iot_power_loop_type_obj)\n\nlet iot_power_loop_codes = await global.get(\"mysql_query\")(\"select * from iot_power_loop_code where spaceCode = ?\", [spaceCode])\nlet iot_power_loop_code_obj = {}\nfor (let i = 0; i < iot_power_loop_codes.length; i++) {\n    let d = iot_power_loop_codes[i]\n    if (iot_power_loop_code_obj[d.deviceId] == undefined) {\n        iot_power_loop_code_obj[d.deviceId] = {}\n    }\n    for (let i = 1; i <= 27; i++) {\n        if (d[\"loop\" + i] == undefined) {\n            continue\n        }\n        iot_power_loop_code_obj[d.deviceId][\"loop\" + i] = d[\"loop\" + i]\n    }\n}\nflow.set(\"iot_power_loop_code_obj\", iot_power_loop_code_obj)\n\nlet iot_power_loop_names = await global.get(\"mysql_query\")(\"select * from iot_power_loop_name where spaceCode = ?\", [spaceCode])\nlet iot_power_loop_name_obj = {}\nfor (let i = 0; i < iot_power_loop_names.length; i++) {\n    let d = iot_power_loop_names[i]\n    if (iot_power_loop_name_obj[d.deviceId] == undefined) {\n        iot_power_loop_name_obj[d.deviceId] = {}\n    }\n    for (let i = 1; i <= 27; i++) {\n        if (d[\"loop\" + i] == undefined) {\n            continue\n        }\n        iot_power_loop_name_obj[d.deviceId][\"loop\" + i] = d[\"loop\" + i]\n    }\n}\nflow.set(\"iot_power_loop_name_obj\", iot_power_loop_name_obj)\n\nmsg.iot_power_loop_type_obj = iot_power_loop_type_obj\nmsg.iot_power_loop_code_obj = iot_power_loop_code_obj\nmsg.iot_power_loop_name_obj = iot_power_loop_name_obj\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 690,
        "y": 660,
        "wires": [
            [
                "e15a29d95380d164"
            ]
        ]
    },
    {
        "id": "e15a29d95380d164",
        "type": "debug",
        "z": "d7f7b9bc5a33ce55",
        "name": "debug 314",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 660,
        "wires": []
    },
    {
        "id": "1f8232056ef229ee",
        "type": "inject",
        "z": "d7f7b9bc5a33ce55",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 490,
        "y": 4100,
        "wires": [
            [
                "c1545bb5efacfd40"
            ]
        ]
    },
    {
        "id": "c1545bb5efacfd40",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "function 31",
        "func": "msg.payload = {\n    \"userId\":\"396950713114\"\n}\nmsg.payload = JSON.stringify(msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 4100,
        "wires": [
            [
                "8c2e60643af3de17"
            ]
        ]
    },
    {
        "id": "668214ee0cf08544",
        "type": "inject",
        "z": "d7f7b9bc5a33ce55",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 490,
        "y": 4140,
        "wires": [
            [
                "2c70c6d700348eb9"
            ]
        ]
    },
    {
        "id": "2c70c6d700348eb9",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "function 32",
        "func": "msg.payload = {\n    \"userId\":\"546249752579\"\n}\nmsg.payload = JSON.stringify(msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 4140,
        "wires": [
            [
                "8c2e60643af3de17"
            ]
        ]
    },
    {
        "id": "5789280542ac9bf7",
        "type": "inject",
        "z": "d7f7b9bc5a33ce55",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 490,
        "y": 4180,
        "wires": [
            [
                "e109014b17593984"
            ]
        ]
    },
    {
        "id": "e109014b17593984",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "function 33",
        "func": "msg.payload = {\n    \"userId\":\"489571435066\"\n}\nmsg.payload = JSON.stringify(msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 4180,
        "wires": [
            [
                "8c2e60643af3de17"
            ]
        ]
    },
    {
        "id": "8f6bd962e991c376",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "处理数据",
        "func": "let spaceCode = msg.payload.spaceCode\nlet areaCode = msg.payload.floorAreaCode\nlet floorCode = msg.payload.floorCode\nlet floorAreaCode = msg.payload.areaCode\nlet tc = msg.payload.tc  //温控策略 open  close\nif (tc != \"close\"){\n    tc = \"open\"\n}\nlet iot_devices = await global.get(\"mysql_query\")(\"select * from iot_device where deleteFlag = 1 and spaceCode =? and areaCode =? and floorCode = ? and floorAreaCode = ? and type = 'pad' limit 1\", [spaceCode, areaCode, floorCode, floorAreaCode])\nif (!iot_devices[0] || !iot_devices[0].id){\n    return\n}\nlet d = iot_devices[0]\nlet deviceId = d.id\nlet createTime = parseInt(new Date().getTime()/1000)\nlet iot_policy_switchs = await global.get(\"mysql_query\")(\"select * from `iot_policy_switch` where deviceId = ? limit 1\", [deviceId])\nif (iot_policy_switchs[0] == undefined){\n    let values = [deviceId, tc, createTime]\n    //await global.get(\"mysql_query\")(\"insert into iot_policy_switch (deviceId, tc, createTime) values (?,?,?)\", values)\n}else{\n    await global.get(\"mysql_query\")(\"update iot_policy_switch set tc = ? where id = ?\", [tc, iot_policy_switchs[0].id])\n}\n\n\nlet db_iot_policy_switchs = await global.get(\"mysql_query\")(\"select * from `iot_policy_switch` where deviceId = ? limit 1\", [deviceId])\nif (!db_iot_policy_switchs[0] || !db_iot_policy_switchs[0].id){\n    return\n}\nlet newMsg = {}\nnewMsg.topic = \"/iot/pad/policy/switch/\" + spaceCode + \"/\" + areaCode + \"/\" + floorCode + \"/\" + floorAreaCode\nnewMsg.payload = {\n    tc:db_iot_policy_switchs[0].tc\n}\nreturn newMsg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 2400,
        "wires": [
            [
                "7bd7c101564c9d32"
            ]
        ]
    },
    {
        "id": "47f396d1a5ba8181",
        "type": "mqtt in",
        "z": "d7f7b9bc5a33ce55",
        "name": "平板端设置智控开关入口",
        "topic": "/iot/setting/pad/policy/switch",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "26637148eca75ac1",
        "nl": false,
        "rap": false,
        "rh": "1",
        "inputs": 0,
        "x": 510,
        "y": 2400,
        "wires": [
            [
                "8f6bd962e991c376"
            ]
        ]
    },
    {
        "id": "7bd7c101564c9d32",
        "type": "mqtt out",
        "z": "d7f7b9bc5a33ce55",
        "name": "状态返回",
        "topic": "",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "26637148eca75ac1",
        "x": 1080,
        "y": 2400,
        "wires": []
    },
    {
        "id": "d51828b4a2aa4c77",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "获取平板开光状态",
        "func": "let spaceCode = msg.payload.spaceCode\nlet areaCode = msg.payload.floorAreaCode\nlet floorCode = msg.payload.floorCode\nlet floorAreaCode = msg.payload.areaCode\nlet iot_devices = await global.get(\"mysql_query\")(\"select * from iot_device where deleteFlag = 1 and spaceCode =? and areaCode =? and floorCode = ? and floorAreaCode = ? and type = 'pad' limit 1\", [spaceCode, areaCode, floorCode, floorAreaCode])\nif (!iot_devices[0] || !iot_devices[0].id){\n    return\n}\nlet d = iot_devices[0]\nlet deviceId = d.id\nlet db_iot_policy_switchs = await global.get(\"mysql_query\")(\"select * from `iot_policy_switch` where deviceId = ? limit 1\", [deviceId])\nif (!db_iot_policy_switchs[0] || !db_iot_policy_switchs[0].id){\n    return\n}\nlet newMsg = {}\nnewMsg.topic = \"/iot/pad/policy/switch/\" + spaceCode + \"/\" + areaCode + \"/\" + floorCode + \"/\" + floorAreaCode\nnewMsg.payload = {\n    tc:db_iot_policy_switchs[0].tc\n}\nreturn newMsg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 2440,
        "wires": [
            [
                "5e7ffa841ca5b074"
            ]
        ]
    },
    {
        "id": "5e7ffa841ca5b074",
        "type": "mqtt out",
        "z": "d7f7b9bc5a33ce55",
        "name": "状态返回",
        "topic": "",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "26637148eca75ac1",
        "x": 1080,
        "y": 2440,
        "wires": []
    },
    {
        "id": "6cc055f7adfb2ab4",
        "type": "mqtt in",
        "z": "d7f7b9bc5a33ce55",
        "name": "平板端查询智控开关入口",
        "topic": "/iot/action/pad/policy/switch/status",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "26637148eca75ac1",
        "nl": false,
        "rap": false,
        "rh": "1",
        "inputs": 0,
        "x": 510,
        "y": 2440,
        "wires": [
            [
                "d51828b4a2aa4c77"
            ]
        ]
    },
    {
        "id": "d50cd761a06a20ad",
        "type": "inject",
        "z": "d7f7b9bc5a33ce55",
        "name": "每天06:00恢复温控开关",
        "props": [],
        "repeat": "",
        "crontab": "00 06 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 530,
        "y": 2480,
        "wires": [
            [
                "283b2b9a0d23763e"
            ]
        ]
    },
    {
        "id": "283b2b9a0d23763e",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "恢复数据",
        "func": "await global.get(\"mysql_query\")(\"update `iot_policy_switch` set tc = 'open'\")\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 760,
        "y": 2480,
        "wires": [
            [
                "1a544e0c63cece3a"
            ]
        ]
    },
    {
        "id": "1a544e0c63cece3a",
        "type": "debug",
        "z": "d7f7b9bc5a33ce55",
        "name": "debug 324",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 2480,
        "wires": []
    },
    {
        "id": "5b0e88a19293cd5f",
        "type": "inject",
        "z": "d7f7b9bc5a33ce55",
        "name": "每天12:30恢复温控开关",
        "props": [],
        "repeat": "",
        "crontab": "30 12 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 530,
        "y": 2520,
        "wires": [
            [
                "283b2b9a0d23763e"
            ]
        ]
    },
    {
        "id": "da9f1af0a49b053e",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "获取属地所有区域",
        "func": "let result = []\nlet spaces = await global.get(\"mysql_query\")(\"select * from space where deleteFlag = 1\")\nlet spaceMqttInfo = global.get(\"spaceMqttInfo\")\nif (!spaceMqttInfo){\n    spaceMqttInfo = {}\n}\nfor (let i = 0; i < spaces.length; i++){\n    let space = {}\n    space.name = spaces[i].name\n    space.code = spaces[i].code\n    if (spaceMqttInfo[space.code]){\n        space.mqttstring = new Buffer(spaceMqttInfo[space.code]).toString('base64')\n    }\n    space.floorArea = []\n    let areas = await global.get(\"mysql_query\")(\"select * from area where spaceCode = ? and deleteFlag = 1 order by code ASC\", spaces[i].code)\n    for(let j = 0; j < areas.length; j++){\n        let area = {}\n        area.name = areas[j].name\n        area.code = areas[j].code\n        area.floor = []\n        let floors = await global.get(\"mysql_query\")(\"select * from floor where spaceCode = ? and areaCode = ? and deleteFlag = 1 order by code ASC\", [spaces[i].code, areas[j].code])\n        for (let k = 0; k < floors.length; k++){\n            let floor = {}\n            floor.name = floors[k].name\n            floor.code = floors[k].code\n            floor.area = await global.get(\"mysql_query\")(\"select * from floor_area where spaceCode = ? and areaCode = ? and floorCode = ? and deleteFlag = 1 order by code ASC\", [spaces[i].code, areas[j].code, floors[k].code])\n            floor.mettingRoom = await global.get(\"mysql_query\")(\"select * from floor_mroom where spaceCode = ? and areaCode = ? and floorCode = ? and deleteFlag = 1 order by code ASC\", [spaces[i].code, areas[j].code, floors[k].code])\n            floor.toilet = await global.get(\"mysql_query\")(\"select * from floor_toilet where spaceCode = ? and areaCode = ? and floorCode = ? and deleteFlag = 1 order by code ASC\", [spaces[i].code, areas[j].code, floors[k].code])\n            floor.room = await global.get(\"mysql_query\")(\"select * from floor_room where spaceCode = ? and areaCode = ? and floorCode = ? and deleteFlag = 1 order by code ASC\", [spaces[i].code, areas[j].code, floors[k].code])\n            area.floor.push(floor)\n        }\n        space.floorArea.push(area)\n    }\n    result.push(space)\n}\nmsg.payload = result\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1420,
        "wires": [
            [
                "dfc9a757dfc557f4"
            ]
        ]
    },
    {
        "id": "0b33bcfac2db292b",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "获取区域所有设备",
        "func": "let spaceCode = msg.payload.spaceCode\nlet areaCode = msg.payload.floorAreaCode\nlet floorCode = msg.payload.floorCode\nlet floorAreaCode = msg.payload.areaCode\nlet iot_gateways = await global.get(\"mysql_query\")(\"select id,macaddr from iot_gateway where deleteFlag = 1 \")\nlet iot_gateways_obj = {}\nfor(let i = 0; i < iot_gateways.length; i++){\n    iot_gateways_obj[iot_gateways[i].id] = iot_gateways[i]\n}\n\nlet iot_devices = await global.get(\"mysql_query\")(\"select * from iot_device where deleteFlag = 1 and spaceCode =? and areaCode =? and floorCode = ? and floorAreaCode = ?\", [spaceCode, areaCode, floorCode, floorAreaCode])\nlet result = {}\nfor(let i = 0; i < iot_devices.length; i++){\n    if(result[iot_devices[i].type] == undefined){\n        result[iot_devices[i].type] = []\n    }\n    if (iot_gateways_obj[iot_devices[i].gatewayID]){\n        iot_devices[i].gatewayMac = iot_gateways_obj[iot_devices[i].gatewayID].macaddr\n    }\n    result[iot_devices[i].type].push(iot_devices[i])\n}\nmsg.topic = \"/iot/setting/device/\" + spaceCode + \"/\" + areaCode + \"/\" + floorCode + \"/\" + floorAreaCode\nmsg.payload = result\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1460,
        "wires": [
            [
                "21acae75d9179e2c"
            ]
        ]
    },
    {
        "id": "be366bf9627e3cd3",
        "type": "http in",
        "z": "d7f7b9bc5a33ce55",
        "name": "",
        "url": "/iot/setting/get/structure",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 440,
        "y": 1420,
        "wires": [
            [
                "da9f1af0a49b053e"
            ]
        ]
    },
    {
        "id": "dfc9a757dfc557f4",
        "type": "http response",
        "z": "d7f7b9bc5a33ce55",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 1020,
        "y": 1420,
        "wires": []
    },
    {
        "id": "addcb2c58bb81226",
        "type": "http in",
        "z": "d7f7b9bc5a33ce55",
        "name": "",
        "url": "/iot/setting/get/device",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 430,
        "y": 1460,
        "wires": [
            [
                "0b33bcfac2db292b"
            ]
        ]
    },
    {
        "id": "21acae75d9179e2c",
        "type": "http response",
        "z": "d7f7b9bc5a33ce55",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 1020,
        "y": 1460,
        "wires": []
    },
    {
        "id": "1c17d23e6476ef69",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "清理数据",
        "func": "let spaceId = \"9\"\nlet checkTime = moment(moment().format(\"YYYY-MM-DD\")).unix()\nlet door_pass_logs = await global.get(\"mysql_query\")(\"select * from door_pass_log where spaceId = ? and passTime < ? order by passTime ASC limit 50000\", [spaceId, checkTime])\nfor (let i = 0; i < door_pass_logs.length; i++){\n    let d = door_pass_logs[i]\n    let values = [d.spaceId, d.platform, d.personName, d.personId, d.personType, d.personPhone, d.personEmail, d.personEmpNo, d.passDirection, d.serviceId, d.serviceName, d.doorId, d.doorName, d.passType, d.faceUrl, d.cardNum, d.passTime, d.passTimeStr]\n    await global.get(\"mysql_query\")('insert into door_pass_final_log (spaceId, platform, personName, personId, personType, personPhone, personEmail, personEmpNo, passDirection, serviceId, serviceName, doorId, doorName, passType, faceUrl, cardNum, passTime, passTimeStr) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)', values)\n\n    await global.get(\"mysql_query\")(\"delete from door_pass_log where id = ? limit 1\", [d.id])\n}\nmsg.checkTime = checkTime\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 760,
        "y": 1920,
        "wires": [
            [
                "41f7785964ed5234"
            ]
        ]
    },
    {
        "id": "41f7785964ed5234",
        "type": "debug",
        "z": "d7f7b9bc5a33ce55",
        "name": "debug 339",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 1920,
        "wires": []
    },
    {
        "id": "3fb5911cea349924",
        "type": "inject",
        "z": "d7f7b9bc5a33ce55",
        "name": "杭州湾通行定时处理通行日志记录",
        "props": [],
        "repeat": "",
        "crontab": "30 02 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 500,
        "y": 1920,
        "wires": [
            [
                "1c17d23e6476ef69"
            ]
        ]
    },
    {
        "id": "bc4f7278db2caccc",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "电量告警处理",
        "func": "let spaceId = flow.get(\"spaceId\")\nif (!spaceId) {\n    return\n}\nif(msg.payload && Array.isArray(msg.payload)){\n    let devices = msg.payload\n    for(let i = 0; i < devices.length; i++){\n        let gateways = await global.get(\"mysql_query\")(\"select * from iot_gateway where macaddr = ? limit 1\", devices[i].gateway)\n        if(gateways[0] == undefined){\n            continue;\n        }\n        let iot_devices = await global.get(\"mysql_query\")(\"select * from iot_device where gatewayID = ? and layer = ? and code = ? limit 1\", [gateways[0].id, devices[i].layer, devices[i].code])\n        if(iot_devices[0] == undefined){\n            continue;\n        }\n        let device = devices[i]\n        if (device && device.status && device.status.online == 1 && device.status.charge != undefined) {\n            let charge = parseInt(device.status.charge)\n            let chargeLowerLimit = 20\n            if (charge >= chargeLowerLimit){\n                continue\n            }\n            let type = \"\" //设备类型报警\n            let typeName = \"\"\n            let deviceID = device.id\n            let deviceName = device.name\n            let deviceAddress = \"\"\n            let deviceFullName = \"/\" + device.spaceCode + \"/\" + device.areaCode + \"/\" + device.floorCode + \"/\" + device.floorAreaCode + \"/\" + device.name\n            let alarmCode = \"\"\n            let alarmMsg = \"\"\n            let baseUnit = \"\"\n            let baseValue = \"\"\n            let realValue = \"\"\n            let createTime = parseInt(new Date().getTime() / 1000)\n            let updateTime = createTime\n            type = \"1\" //设备类型报警\n            typeName = \"设备告警\"\n            deviceAddress = \"charge\"\n            alarmCode = \"\"\n            alarmMsg = \"设备电量低于\" + chargeLowerLimit + \"%异常\"\n            \n            if(!spaceId || !deviceID || !deviceAddress){\n                return\n            }\n\n            //记录告警日志\n            let values = [spaceId, type, typeName, deviceID, deviceName, deviceAddress, deviceFullName, alarmCode, alarmMsg, baseUnit, baseValue, realValue, createTime]\n            await global.get(\"mysql_query\")(\"insert into system_alarm (spaceId, type, typeName, deviceID, deviceName, deviceAddress, deviceFullName, alarmCode, alarmMsg, baseUnit, baseValue, realValue, createTime) values (?,?,?,?,?,?,?,?,?,?,?,?,?)\", values)\n\n            //推送日志信息到TD\n            let data = {}\n            data.ts = new Date().getTime()\n            data.position = deviceFullName\n            data.space = device.spaceCode\n            data.floor_area = device.areaCode\n            data.floor = device.floorCode\n            data.area = device.floorAreaCode\n            data.device_code = device.code\n            data.device_id = device.id\n            data.type = type\n            data.type_name = typeName\n            data.device_address = deviceAddress\n            data.alarm_code = alarmCode\n            data.alarm_msg = alarmMsg\n            data.base_unit = baseUnit\n            data.base_value = baseValue\n            data.real_value = realValue\n            let newMsg = {}\n            newMsg.payload = data\n            node.send(newMsg)\n\n            //记录告警数据源\n            let system_alarm_sources = await global.get(\"mysql_query\")(\"select * from system_alarm_source where spaceId = ? and deviceID = ? and `status` = 0 and deviceAddress = ? limit 1\", [spaceId, device.id, deviceAddress])\n            if (system_alarm_sources[0] == undefined) {\n                let values = [spaceId, type, typeName, deviceID, deviceName, deviceAddress, deviceFullName, alarmCode, alarmMsg, baseUnit, baseValue, realValue, createTime, updateTime]\n                await global.get(\"mysql_query\")(\"insert into system_alarm_source (spaceId, type, typeName, deviceID, deviceName, deviceAddress, deviceFullName, alarmCode, alarmMsg, baseUnit, baseValue, realValue, createTime, updateTime) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?)\", values)\n            } else {\n                await global.get(\"mysql_query\")(\"update system_alarm_source set updateTime = ? where id = ? limit 1\", [updateTime, system_alarm_sources[0].id])\n            }\n        }\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "CryptoJS",
                "module": "crypto-js"
            },
            {
                "var": "WebSocket",
                "module": "ws"
            },
            {
                "var": "fs",
                "module": "fs"
            },
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 760,
        "y": 2600,
        "wires": [
            [
                "9d5a63e2284b1e47",
                "3f9622b97145244e"
            ]
        ]
    },
    {
        "id": "6b5a32ee379109f3",
        "type": "mqtt in",
        "z": "d7f7b9bc5a33ce55",
        "name": "水浸数据接收",
        "topic": "/iot/status/inundationsensor/#",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "26637148eca75ac1",
        "nl": false,
        "rap": false,
        "rh": "1",
        "inputs": 0,
        "x": 490,
        "y": 2620,
        "wires": [
            [
                "bc4f7278db2caccc",
                "26a99383885d00d0"
            ]
        ]
    },
    {
        "id": "1bc3aa33fc98213b",
        "type": "mqtt out",
        "z": "d7f7b9bc5a33ce55",
        "name": "推送到监控终端",
        "topic": "/emergent/status/security/message",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "26637148eca75ac1",
        "x": 1000,
        "y": 2640,
        "wires": []
    },
    {
        "id": "9d5a63e2284b1e47",
        "type": "debug",
        "z": "d7f7b9bc5a33ce55",
        "name": "debug 362",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 2560,
        "wires": []
    },
    {
        "id": "26a99383885d00d0",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "漏水安防告警",
        "func": "if(msg.payload && Array.isArray(msg.payload)){\n    let devices = msg.payload\n    for(let i = 0; i < devices.length; i++){\n        let gateways = await global.get(\"mysql_query\")(\"select * from iot_gateway where macaddr = ? limit 1\", devices[i].gateway)\n        if(gateways[0] == undefined){\n            continue;\n        }\n        let iot_devices = await global.get(\"mysql_query\")(\"select * from iot_device where gatewayID = ? and layer = ? and code = ? limit 1\", [gateways[0].id, devices[i].layer, devices[i].code])\n        if(iot_devices[0] == undefined){\n            continue;\n        }\n        let device = devices[i]\n        if (device && device.status && device.status.online == 1 && device.status.alarm == \"alarm\" && device.status.alarmValue > 0) {\n            let data = iot_devices[0]\n            let uuid = flow.get(\"uuid\")()\n            let spaceCode = data.spaceCode ? data.spaceCode : \"\"\n            let floorAreaCode = data.areaCode ? data.areaCode : \"\"\n            let floorCode = data.floorCode ? data.floorCode : \"\"\n            let areaCode = data.floorAreaCode ? data.floorAreaCode : \"\"\n            let sourceName = data.name ? data.name : \"\"\n            let classify = \"security\"\n            let classifyName = \"安防告警\"\n            let emergentType = \"漏水告警\"\n            let floorCodeNum = parseInt(floorCode)\n            let floorName = floorCode\n            if (floorCodeNum) {\n                floorName = floorCodeNum + \"楼\"\n            }\n            let emergentContent = \"请注意\" + floorName + sourceName + \"产生漏水告警，请立即前往！\"\n            let voiceText = emergentContent \n            let voiceUrl = \"\"\n            let happenDate = moment().format(\"YYYY-MM-DD\")\n            let happenTime = moment().format(\"YYYY-MM-DD HH:mm:ss\")\n            let createTime = parseInt(new Date().getTime() / 1000)\n            let values = [uuid, spaceCode, floorAreaCode, floorCode, areaCode, sourceName, classify, classifyName, emergentType, emergentContent, voiceText, voiceUrl, happenDate, happenTime, createTime]\n            \n            let system_emergents = await global.get(\"mysql_query\")(\"select * from system_emergent where spaceCode = ? and floorAreaCode = ? and floorCode = ? and areaCode = ? and sourceName = ? and classify = ? and emergentType = ? and status != 2 and status != 3 limit 1\", [spaceCode, floorAreaCode, floorCode, areaCode, sourceName, classify, emergentType])\n            if(system_emergents[0] == undefined){\n                await global.get(\"mysql_query\")('insert into system_emergent (uuid, spaceCode, floorAreaCode, floorCode, areaCode, sourceName, classify, classifyName, emergentType, emergentContent, voiceText, voiceUrl, happenDate, happenTime, createTime) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)', values)\n                //推送终端\n                let pushMsg = {}\n                pushMsg.payload = {\n                    uuid:uuid,\n                    spaceCode: spaceCode,\n                    floorAreaCode: floorAreaCode,\n                    floorCode: floorCode,\n                    areaCode: areaCode,\n                    sourceName: sourceName,\n                    happenTime:happenTime,\n                    message:emergentContent\n                }\n                node.send(pushMsg)\n            }\n            \n        }\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "CryptoJS",
                "module": "crypto-js"
            },
            {
                "var": "WebSocket",
                "module": "ws"
            },
            {
                "var": "fs",
                "module": "fs"
            },
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 760,
        "y": 2640,
        "wires": [
            [
                "9d5a63e2284b1e47",
                "1bc3aa33fc98213b"
            ]
        ]
    },
    {
        "id": "3f9622b97145244e",
        "type": "mqtt out",
        "z": "d7f7b9bc5a33ce55",
        "name": "告警数据推送至TD引擎",
        "topic": "/iot/systemalarm/data/report",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "26637148eca75ac1",
        "x": 1030,
        "y": 2600,
        "wires": []
    },
    {
        "id": "04d60b99dcaecd66",
        "type": "inject",
        "z": "d7f7b9bc5a33ce55",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 270,
        "y": 80,
        "wires": [
            [
                "56e7317cd7521e69"
            ]
        ]
    },
    {
        "id": "ec017e7d940e986c",
        "type": "debug",
        "z": "d7f7b9bc5a33ce55",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 120,
        "wires": []
    },
    {
        "id": "15c1d3a9639052b8",
        "type": "mqtt in",
        "z": "d7f7b9bc5a33ce55",
        "name": "",
        "topic": "/api/#",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "26637148eca75ac1",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 4360,
        "wires": [
            []
        ]
    },
    {
        "id": "49cbd224c6506746",
        "type": "debug",
        "z": "d7f7b9bc5a33ce55",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 4380,
        "wires": []
    },
    {
        "id": "2fdc509d1ea79fa5",
        "type": "mqtt out",
        "z": "d7f7b9bc5a33ce55",
        "name": "",
        "topic": "",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "26637148eca75ac1",
        "x": 850,
        "y": 4260,
        "wires": []
    },
    {
        "id": "4dee071fc3cb8806",
        "type": "function",
        "z": "d7f7b9bc5a33ce55",
        "name": "MQTT2HTTP",
        "func": "let requestId = msg.payload.requestId\nlet spaceCode = msg.payload.spaceCode\nlet macAddress = msg.payload.macAddress\nlet apiName = msg.payload.apiName\nlet parms = msg.payload.parms\nmsg.topic = \"/api/response/\"+requestId\n\n\n//调用接口，返回内容放入payload\n\nmsg.payload={\n    org:[\n        {\n            orgId:1,\n            orgName:'极企'\n        },\n        {\n            orgId:2,\n            orgName:'极米'\n        },\n        {\n            orgId:3,\n            orgName:'极氪'\n        },\n    ]\n\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 4300,
        "wires": [
            [
                "2fdc509d1ea79fa5",
                "536b7db0f81fb871"
            ]
        ]
    },
    {
        "id": "536b7db0f81fb871",
        "type": "debug",
        "z": "d7f7b9bc5a33ce55",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 4400,
        "wires": []
    },
    {
        "id": "ba736497f988ce1e",
        "type": "inject",
        "z": "9459898094a79b01",
        "name": "定时触发",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "Hello World",
        "payload": "这是来自Node-RED的消息",
        "payloadType": "str",
        "x": 150,
        "y": 100,
        "wires": [
            [
                "ed195d89b0cec721",
                "3f475f4a6b8acb83"
            ]
        ]
    },
    {
        "id": "ed195d89b0cec721",
        "type": "debug",
        "z": "9459898094a79b01",
        "name": "显示原始消息",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 60,
        "wires": []
    },
    {
        "id": "3f475f4a6b8acb83",
        "type": "function",
        "z": "9459898094a79b01",
        "name": "处理消息",
        "func": "// 在消息中添加时间戳\nmsg.timestamp = new Date().toISOString();\nmsg.processed = true;\n\n// 返回修改后的消息\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 140,
        "wires": [
            [
                "6accc6e776b58da2"
            ]
        ]
    },
    {
        "id": "6accc6e776b58da2",
        "type": "debug",
        "z": "9459898094a79b01",
        "name": "显示处理后的消息",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 140,
        "wires": []
    },
    {
        "id": "288dd196c45466fd",
        "type": "debug",
        "z": "adfefcfb027bb319",
        "name": "调试输出",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 120,
        "wires": []
    },
    {
        "id": "fe0ccb5e8b6ccbac",
        "type": "function",
        "z": "adfefcfb027bb319",
        "name": "数据处理",
        "func": "// 将Modbus原始数据转换为可读格式\nif (msg.payload && msg.payload.buffer) {\n    // 处理保持寄存器数据\n    const data = msg.payload.buffer;\n    const processedData = {\n        timestamp: new Date().toISOString(),\n        registerValues: Array.from(data),\n        temperature: data[0] / 10, // 假设第一个寄存器是温度值，除以10得到实际值\n        pressure: data[1] / 100,   // 假设第二个寄存器是压力值，除以100得到实际值\n        status: data[2]            // 假设第三个寄存器是状态值\n    };\n    \n    msg.payload = processedData;\n    msg.topic = \"processed_modbus_data\";\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "b5d8d542b3ac5186",
        "type": "inject",
        "z": "adfefcfb027bb319",
        "name": "手动触发读取",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "manual_read",
        "payload": "true",
        "payloadType": "bool",
        "x": 150,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "b5e8bb5bae1828fb",
        "type": "make-iot-smart",
        "name": "AI助手",
        "apiConfig": "d1b65edb7885fb7b",
        "algorithm": "dagre_lr",
        "settings": {},
        "valid": true,
        "d": true,
        "x": 100,
        "y": 100,
        "z": "34ab4d95e517fb00"
    }
]