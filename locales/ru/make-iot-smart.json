{
    "make-iot-smart": {
        "paletteLabel": "ИИ-помощник",
        "label": {
            "name": "Имя",
            "apiConfig": "Конфигурация API",
            "aiAssistant": "ИИ-помощник",
            "defaultName": "ИИ-помощник"
        },
        "placeholder": {
            "name": "Введите имя узла"
        },
        "tips": {
            "autoHide": "Этот узел автоматически скрывается и используется для настройки функциональности ИИ-помощника"
        }
    },
    "common": {
        "label": {
            "tip": "Совет:"
        }
    },
    "api-config": {
        "label": {
            "name": "Имя",
            "provider": "Провайдер API",
            "apiKey": "API-ключ",
            "model": "Модель",
            "maxTokens": "Максимум токенов",
            "useDifferentModels": "Использовать разные модели для режимов Plan и Act"
        },
        "placeholder": {
            "name": "Имя",
            "apiKey": "Пожалуйста, введите API-ключ"
        },
        "tips": {
            "apiKey": "Этот ключ хранится локально и используется только для API-запросов из этого расширения.",
            "differentModels": "Переключение между режимами Plan и Act сохранит API и модель, используемые в предыдущем режиме. Это может быть полезно при использовании мощной модели рассуждений для планирования, а затем более дешевой модели кодирования для выполнения.",
            "capabilities": {
                "noImage": "Нет поддержки изображений",
                "noBrowser": "Нет поддержки использования браузера",
                "promptCache": "Поддержка кэширования промптов",
                "maxInput": "Максимальный ввод: 8,000 токенов",
                "cacheWritePrice": "Цена записи кэша: $0.27/миллион токенов",
                "cacheReadPrice": "Цена чтения кэша: $0.07/миллион токенов",
                "outputPrice": "Цена вывода: $1.10/миллион токенов"
            }
        },
        "help": {
            "description": "Узел конфигурации API используется для хранения API-ключей и выбора моделей для провайдеров ИИ-сервисов.",
            "providers": "Поддерживаемые провайдеры включают DeepSeek, OpenAI и Anthropic.",
            "usage": "Вы можете выбрать разные модели для разных сценариев использования и опционально использовать разные модели для режимов Plan и Act."
        },
        "validation": {
            "apiKeyFiltered": "Недопустимые символы отфильтрованы, API-ключ может содержать только цифры, буквы и символы"
        }
    },
    "errors": {
        "apiKeyMissing": "API-ключ не настроен, пожалуйста, установите API-ключ в узле конфигурации",
        "apiKeyAuthFailed": "Аутентификация API-ключа не удалась, пожалуйста, проверьте правильность API-ключа в узле конфигурации",
        "modelMissing": "Имя модели отсутствует, пожалуйста, выберите модель в узле конфигурации",
        "configNodeNotFound": "Узел конфигурации API не найден",
        "networkError": "Ошибка сети",
        "executionFailed": "Выполнение не удалось",
        "toolExecutionFailed": "Выполнение инструмента не удалось",
        "unknownError": "Произошла неизвестная ошибка"
    },
    "messages": {
        "apiConfigInit": "Инициализация узла конфигурации API",
        "mcpNotEnabled": "MCP не включен - enableMcp равно false",
        "mcpCommandNotConfigured": "Команда MCP не настроена",
        "mcpInitStart": "Начало инициализации соединения MCP",
        "mcpInitSuccess": "Инициализация MCP успешна",
        "mcpInitFailed": "Инициализация MCP не удалась",
        "aiHelperNodeExists": "Узел ИИ-помощника уже существует, создание не требуется",
        "aiHelperNodeCreated": "Узел ИИ-помощника автоматически успешно создан",
        "aiHelperNodeCreating": "Узел ИИ-помощника не найден, выполняется автоматическое создание...",
        "flowCreationSuccess": "Поток успешно создан!",
        "toolExecutionSuccess": "Применено",
        "retry": "Повторить",
        "apiConfigNotFound": "Узел конфигурации API не найден, невозможно автоматически создать узел ИИ-помощника",
        "initializingAIHelper": "Настройка setTimeout для вызова ensureAIHelperNode...",
        "aiHelperNodeChecking": "setTimeout сработал, начинается выполнение ensureAIHelperNode..."
    },
    "status": {
        "ready": "Готов",
        "connected": "Подключен",
        "disconnected": "Отключен",
        "error": "Ошибка"
    }
}